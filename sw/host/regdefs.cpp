////////////////////////////////////////////////////////////////////////////////
//
// Filename:	./regdefs.cpp
// {{{
// Project:	AXI DMA Check: A utility to measure AXI DMA speeds
//
// DO NOT EDIT THIS FILE!
// Computer Generated: This file is computer generated by AUTOFPGA. DO NOT EDIT.
// DO NOT EDIT THIS FILE!
//
// CmdLine:	/home/dan/work/rnd/opencores/autofpga/trunk/sw/autofpga /home/dan/work/rnd/opencores/autofpga/trunk/sw/autofpga -d autofpga.dbg -o ./ global.txt axibus.txt axiram.txt axidma.txt aximm2s.txt axis2mm.txt controlbus.txt streamsink.txt streamsrc.txt vibus.txt zipaxi.txt axiconsole.txt mem_bkram_only.txt mm2sperf.txt s2mmperf.txt
//
// Creator:	Dan Gisselquist, Ph.D.
//		Gisselquist Technology, LLC
//
////////////////////////////////////////////////////////////////////////////////
// }}}
// Copyright (C) 2020-2021, Gisselquist Technology, LLC
// {{{
// This program is free software (firmware): you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
// target there if the PDF file isn't present.)  If not, see
// <http://www.gnu.org/licenses/> for a copy.
// }}}
// License:	GPL, v3, as defined and found on www.gnu.org,
// {{{
//		http://www.gnu.org/licenses/gpl.html
//
////////////////////////////////////////////////////////////////////////////////
//
// }}}
#include <stdio.h>
#include <stdlib.h>
#include <strings.h>
#include <ctype.h>
#include "regdefs.h"

const	REGNAME	raw_bregs[] = {
	{ R_CONSOLE_FIFO      ,	"UFIFO"             	},
	{ R_CONSOLE_UARTRX    ,	"RX"                	},
	{ R_CONSOLE_UARTTX    ,	"TX"                	},
	{ R_STREAMSINK_BEATS  ,	"BEATS"             	},
	{ R_STREAMSINK_PACKETS,	"PACKETS"           	},
	{ R_STREAMSINK_CLOCKS ,	"CLOCKS"            	},
	{ R_AXIDMACTRL        ,	"AXIDMACTRL"        	},
	{ R_AXIDMASRCLO       ,	"AXIDMASRCLO"       	},
	{ R_AXIDMASRCHI       ,	"AXIDMASRCHI"       	},
	{ R_AXIDMADSTLO       ,	"AXIDMADSTLO"       	},
	{ R_AXIDMADSTHI       ,	"AXIDMADSTHI"       	},
	{ R_AXIDMALENLO       ,	"AXIDMALENLO"       	},
	{ R_AXIDMALENHI       ,	"AXIDMALENHI"       	},
	{ R_MM2SCTRL          ,	"MM2SCTRL"          	},
	{ R_MM2SADDRLO        ,	"MM2SADDRLO"        	},
	{ R_MM2SADDRHI        ,	"MM2SADDRHI"        	},
	{ R_MM2SLENLO         ,	"MM2SLENLO"         	},
	{ R_MM2SLENHI         ,	"MM2SLENHI"         	},
	{ R_S2MMCTRL          ,	"S2MMCTRL"          	},
	{ R_S2MMADDRLO        ,	"S2MMADDRLO"        	},
	{ R_S2MMADDRHI        ,	"S2MMADDRHI"        	},
	{ R_S2MMLENLO         ,	"S2MMLENLO"         	},
	{ R_S2MMLENHI         ,	"S2MMLENHI"         	},
	{ R_MM2SPERFACTIVE    ,	"MM2SPERFACTIVE"    	},
	{ R_MM2SPERFBURSTSZ   ,	"MM2SPERFBURSTSZ"   	},
	{ R_MM2SPERFWRIDLES   ,	"MM2SPERFWRIDLES"   	},
	{ R_MM2SPERFAWRBURSTS ,	"MM2SPERFAWRBURSTS" 	},
	{ R_MM2SPERFWRBEATS   ,	"MM2SPERFWRBEATS"   	},
	{ R_MM2SPERFAWBYTES   ,	"MM2SPERFAWBYTES"   	},
	{ R_MM2SPERFWBYTES    ,	"MM2SPERFWBYTES"    	},
	{ R_MM2SPERFWRSLOWD   ,	"MM2SPERFWRSLOWD"   	},
	{ R_MM2SPERFWRSTALLS  ,	"MM2SPERFWRSTALLS"  	},
	{ R_MM2SPERFWRADDRLAG ,	"MM2SPERFWRADDRLAG" 	},
	{ R_MM2SPERFWRDATALAG ,	"MM2SPERFWRDATALAG" 	},
	{ R_MM2SPERFWRBEATSD  ,	"MM2SPERFWRBEATSD"  	},
	{ R_MM2SPERFAWBURSTB  ,	"MM2SPERFAWBURSTB"  	},
	{ R_MM2SPERFAWADDRST  ,	"MM2SPERFAWADDRST"  	},
	{ R_MM2SPERFAWWSTALL  ,	"MM2SPERFAWWSTALL"  	},
	{ R_MM2SPERFAWWSLOW   ,	"MM2SPERFAWWSLOW"   	},
	{ R_MM2SPERFAWWNODATA ,	"MM2SPERFAWWNODATA" 	},
	{ R_MM2SPERFAWWBEATS  ,	"MM2SPERFAWWBEATS"  	},
	{ R_MM2SPERFWRBLAGS   ,	"MM2SPERFWRBLAGS"   	},
	{ R_MM2SPERFWRBSTALL  ,	"MM2SPERFWRBSTALL"  	},
	{ R_MM2SPERFRDIDLES   ,	"MM2SPERFRDIDLES"   	},
	{ R_MM2SPERFRDMAXB    ,	"MM2SPERFRDMAXB"    	},
	{ R_MM2SPERFRDBURSTS  ,	"MM2SPERFRDBURSTS"  	},
	{ R_MM2SPERFRDBEATS   ,	"MM2SPERFRDBEATS"   	},
	{ R_MM2SPERFRDBYTES   ,	"MM2SPERFRDBYTES"   	},
	{ R_MM2SPERFRDARSTALLS,	"MM2SPERFRDARSTALLS"	},
	{ R_MM2SPERFRDRSTALLS ,	"MM2SPERFRDRSTALLS" 	},
	{ R_MM2SPERFRDLAG     ,	"MM2SPERFRDLAG"     	},
	{ R_MM2SPERFRDSLOW    ,	"MM2SPERFRDSLOW"    	},
	{ R_MM2SPERFCONTROL   ,	"MM2SPERFCONTROL"   	},
	{ R_S2MMPERFACTIVE    ,	"S2MMPERFACTIVE"    	},
	{ R_S2MMPERFBURSTSZ   ,	"S2MMPERFBURSTSZ"   	},
	{ R_S2MMPERFWRIDLES   ,	"S2MMPERFWRIDLES"   	},
	{ R_S2MMPERFAWRBURSTS ,	"S2MMPERFAWRBURSTS" 	},
	{ R_S2MMPERFWRBEATS   ,	"S2MMPERFWRBEATS"   	},
	{ R_S2MMPERFAWBYTES   ,	"S2MMPERFAWBYTES"   	},
	{ R_S2MMPERFWBYTES    ,	"S2MMPERFWBYTES"    	},
	{ R_S2MMPERFWRSLOWD   ,	"S2MMPERFWRSLOWD"   	},
	{ R_S2MMPERFWRSTALLS  ,	"S2MMPERFWRSTALLS"  	},
	{ R_S2MMPERFWRADDRLAG ,	"S2MMPERFWRADDRLAG" 	},
	{ R_S2MMPERFWRDATALAG ,	"S2MMPERFWRDATALAG" 	},
	{ R_S2MMPERFWRBEATSD  ,	"S2MMPERFWRBEATSD"  	},
	{ R_S2MMPERFAWBURSTB  ,	"S2MMPERFAWBURSTB"  	},
	{ R_S2MMPERFAWADDRST  ,	"S2MMPERFAWADDRST"  	},
	{ R_S2MMPERFAWWSTALL  ,	"S2MMPERFAWWSTALL"  	},
	{ R_S2MMPERFAWWSLOW   ,	"S2MMPERFAWWSLOW"   	},
	{ R_S2MMPERFAWWNODATA ,	"S2MMPERFAWWNODATA" 	},
	{ R_S2MMPERFAWWBEATS  ,	"S2MMPERFAWWBEATS"  	},
	{ R_S2MMPERFWRBLAGS   ,	"S2MMPERFWRBLAGS"   	},
	{ R_S2MMPERFWRBSTALL  ,	"S2MMPERFWRBSTALL"  	},
	{ R_S2MMPERFRDIDLES   ,	"S2MMPERFRDIDLES"   	},
	{ R_S2MMPERFRDMAXB    ,	"S2MMPERFRDMAXB"    	},
	{ R_S2MMPERFRDBURSTS  ,	"S2MMPERFRDBURSTS"  	},
	{ R_S2MMPERFRDBEATS   ,	"S2MMPERFRDBEATS"   	},
	{ R_S2MMPERFRDBYTES   ,	"S2MMPERFRDBYTES"   	},
	{ R_S2MMPERFRDARSTALLS,	"S2MMPERFRDARSTALLS"	},
	{ R_S2MMPERFRDRSTALLS ,	"S2MMPERFRDRSTALLS" 	},
	{ R_S2MMPERFRDLAG     ,	"S2MMPERFRDLAG"     	},
	{ R_S2MMPERFRDSLOW    ,	"S2MMPERFRDSLOW"    	},
	{ R_S2MMPERFCONTROL   ,	"S2MMPERFCONTROL"   	},
	{ R_AXIRAM            ,	"AXIRAM"            	},
	{ R_AXIRAM            ,	"RAM"               	},
	{ R_ZIPCTRL           ,	"CPU"               	},
	{ R_ZIPCTRL           ,	"ZIPCTRL"           	},
	{ R_ZIPREGS           ,	"ZIPREGS"           	},
	{ R_ZIPS0             ,	"SR0"               	},
	{ R_ZIPS1             ,	"SR1"               	},
	{ R_ZIPS2             ,	"SR2"               	},
	{ R_ZIPS3             ,	"SR3"               	},
	{ R_ZIPS4             ,	"SR4"               	},
	{ R_ZIPS5             ,	"SR5"               	},
	{ R_ZIPS6             ,	"SR6"               	},
	{ R_ZIPS7             ,	"SR7"               	},
	{ R_ZIPS8             ,	"SR8"               	},
	{ R_ZIPS9             ,	"SR9"               	},
	{ R_ZIPS10            ,	"SR10"              	},
	{ R_ZIPS11            ,	"SR11"              	},
	{ R_ZIPS12            ,	"SR12"              	},
	{ R_ZIPSSP            ,	"SSP"               	},
	{ R_ZIPSSP            ,	"SR13"              	},
	{ R_ZIPCC             ,	"ZIPCC"             	},
	{ R_ZIPCC             ,	"CC"                	},
	{ R_ZIPCC             ,	"SCC"               	},
	{ R_ZIPCC             ,	"SR14"              	},
	{ R_ZIPPC             ,	"ZIPPC"             	},
	{ R_ZIPPC             ,	"PC"                	},
	{ R_ZIPPC             ,	"SPC"               	},
	{ R_ZIPPC             ,	"SR15"              	},
	{ R_ZIPUSER           ,	"ZIPUSER"           	},
	{ R_ZIPU0             ,	"UR0"               	},
	{ R_ZIPU1             ,	"UR1"               	},
	{ R_ZIPU2             ,	"UR2"               	},
	{ R_ZIPU3             ,	"UR3"               	},
	{ R_ZIPU4             ,	"UR4"               	},
	{ R_ZIPU5             ,	"UR5"               	},
	{ R_ZIPU6             ,	"UR6"               	},
	{ R_ZIPU7             ,	"UR7"               	},
	{ R_ZIPU8             ,	"UR8"               	},
	{ R_ZIPU9             ,	"UR9"               	},
	{ R_ZIPU10            ,	"SR10"              	},
	{ R_ZIPU11            ,	"SR11"              	},
	{ R_ZIPU12            ,	"SR12"              	},
	{ R_ZIPUSP            ,	"USP"               	},
	{ R_ZIPUSP            ,	"UR13"              	},
	{ R_ZIPUCC            ,	"ZIPUCC"            	},
	{ R_ZIPUCC            ,	"UCC"               	},
	{ R_ZIPUPC            ,	"ZIPUPC"            	},
	{ R_ZIPUPC            ,	"UPC"               	},
	{ R_ZIPSYSTEM         ,	"ZIPSYSTEM"         	},
	{ R_ZIPSYSTEM         ,	"ZIPSYS"            	}
};

// REGSDEFS.CPP.INSERT for any bus masters
// And then from the peripherals
// And finally any master REGS.CPP.INSERT tags
#define	RAW_NREGS	(sizeof(raw_bregs)/sizeof(bregs[0]))

const	REGNAME		*bregs = raw_bregs;
const	int	NREGS = RAW_NREGS;

unsigned	addrdecode(const char *v) {
	if (isalpha(v[0])) {
		for(int i=0; i<NREGS; i++)
			if (strcasecmp(v, bregs[i].m_name)==0)
				return bregs[i].m_addr;
		fprintf(stderr, "Unknown register: %s\n", v);
		exit(-2);
	} else
		return strtoul(v, NULL, 0);
}

const	char *addrname(const unsigned v) {
	for(int i=0; i<NREGS; i++)
		if (bregs[i].m_addr == v)
			return bregs[i].m_name;
	return NULL;
}

