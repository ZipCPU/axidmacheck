////////////////////////////////////////////////////////////////////////////////
//
// Filename:	./regdefs.h
// {{{
// Project:	AXI DMA Check: A utility to measure AXI DMA speeds
//
// DO NOT EDIT THIS FILE!
// Computer Generated: This file is computer generated by AUTOFPGA. DO NOT EDIT.
// DO NOT EDIT THIS FILE!
//
// CmdLine:	/home/dan/work/rnd/opencores/autofpga/trunk/sw/autofpga /home/dan/work/rnd/opencores/autofpga/trunk/sw/autofpga -d autofpga.dbg -o ./ global.txt axibus.txt axiram.txt axidma.txt aximm2s.txt axis2mm.txt controlbus.txt streamsink.txt streamsrc.txt vibus.txt zipaxi.txt axiconsole.txt mem_bkram_only.txt mm2sperf.txt s2mmperf.txt
//
// Creator:	Dan Gisselquist, Ph.D.
//		Gisselquist Technology, LLC
//
////////////////////////////////////////////////////////////////////////////////
// }}}
// Copyright (C) 2020-2021, Gisselquist Technology, LLC
// {{{
// This program is free software (firmware): you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
// target there if the PDF file isn't present.)  If not, see
// <http://www.gnu.org/licenses/> for a copy.
// }}}
// License:	GPL, v3, as defined and found on www.gnu.org,
// {{{
//		http://www.gnu.org/licenses/gpl.html
//
////////////////////////////////////////////////////////////////////////////////
//
// }}}
#ifndef	REGDEFS_H
#define	REGDEFS_H


//
// The @REGDEFS.H.INCLUDE tag
//
// @REGDEFS.H.INCLUDE for masters
// @REGDEFS.H.INCLUDE for peripherals
// And finally any master REGDEFS.H.INCLUDE tags
// End of definitions from REGDEFS.H.INCLUDE


//
// Register address definitions, from @REGS.#d
//
// CONSOLE registers
#define	R_CONSOLE_FIFO      	0x00000004	// 00000000, wbregs names: UFIFO
#define	R_CONSOLE_UARTRX    	0x00000008	// 00000000, wbregs names: RX
#define	R_CONSOLE_UARTTX    	0x0000000c	// 00000000, wbregs names: TX
#define	R_STREAMSINK_BEATS  	0x00000080	// 00000080, wbregs names: BEATS
#define	R_STREAMSINK_PACKETS	0x00000084	// 00000080, wbregs names: PACKETS
#define	R_STREAMSINK_CLOCKS 	0x00000088	// 00000080, wbregs names: CLOCKS
#define	R_AXIDMACTRL        	0x000000a0	// 000000a0, wbregs names: AXIDMACTRL
#define	R_AXIDMASRCLO       	0x000000a8	// 000000a0, wbregs names: AXIDMASRCLO
#define	R_AXIDMASRCHI       	0x000000ac	// 000000a0, wbregs names: AXIDMASRCHI
#define	R_AXIDMADSTLO       	0x000000b0	// 000000a0, wbregs names: AXIDMADSTLO
#define	R_AXIDMADSTHI       	0x000000b4	// 000000a0, wbregs names: AXIDMADSTHI
#define	R_AXIDMALENLO       	0x000000b8	// 000000a0, wbregs names: AXIDMALENLO
#define	R_AXIDMALENHI       	0x000000bc	// 000000a0, wbregs names: AXIDMALENHI
// AXI MM2S registers
#define	R_MM2SCTRL          	0x000000c0	// 000000c0, wbregs names: MM2SCTRL
#define	R_MM2SADDRLO        	0x000000c8	// 000000c0, wbregs names: MM2SADDRLO
#define	R_MM2SADDRHI        	0x000000cc	// 000000c0, wbregs names: MM2SADDRHI
#define	R_MM2SLENLO         	0x000000d8	// 000000c0, wbregs names: MM2SLENLO
#define	R_MM2SLENHI         	0x000000dc	// 000000c0, wbregs names: MM2SLENHI
#define	R_S2MMCTRL          	0x000000e0	// 000000e0, wbregs names: S2MMCTRL
#define	R_S2MMADDRLO        	0x000000f0	// 000000e0, wbregs names: S2MMADDRLO
#define	R_S2MMADDRHI        	0x000000f4	// 000000e0, wbregs names: S2MMADDRHI
#define	R_S2MMLENLO         	0x000000f8	// 000000e0, wbregs names: S2MMLENLO
#define	R_S2MMLENHI         	0x000000fc	// 000000e0, wbregs names: S2MMLENHI
#define	R_AXIRAM            	0x01000000	// 01000000, wbregs names: AXIRAM, RAM
// ZipCPU control/debug registers
#define	R_ZIPCTRL           	0x02000080	// 02000000, wbregs names: CPU, ZIPCTRL
#define	R_ZIPREGS           	0x02000000	// 02000000, wbregs names: ZIPREGS
#define	R_ZIPS0             	0x02000000	// 02000000, wbregs names: SR0
#define	R_ZIPS1             	0x02000004	// 02000000, wbregs names: SR1
#define	R_ZIPS2             	0x02000008	// 02000000, wbregs names: SR2
#define	R_ZIPS3             	0x0200000c	// 02000000, wbregs names: SR3
#define	R_ZIPS4             	0x02000010	// 02000000, wbregs names: SR4
#define	R_ZIPS5             	0x02000014	// 02000000, wbregs names: SR5
#define	R_ZIPS6             	0x02000018	// 02000000, wbregs names: SR6
#define	R_ZIPS7             	0x0200001c	// 02000000, wbregs names: SR7
#define	R_ZIPS8             	0x02000020	// 02000000, wbregs names: SR8
#define	R_ZIPS9             	0x02000024	// 02000000, wbregs names: SR9
#define	R_ZIPS10            	0x02000028	// 02000000, wbregs names: SR10
#define	R_ZIPS11            	0x0200002c	// 02000000, wbregs names: SR11
#define	R_ZIPS12            	0x02000030	// 02000000, wbregs names: SR12
#define	R_ZIPSSP            	0x02000034	// 02000000, wbregs names: SSP, SR13
#define	R_ZIPCC             	0x02000038	// 02000000, wbregs names: ZIPCC, CC, SCC, SR14
#define	R_ZIPPC             	0x0200003c	// 02000000, wbregs names: ZIPPC, PC, SPC, SR15
#define	R_ZIPUSER           	0x02000040	// 02000000, wbregs names: ZIPUSER
#define	R_ZIPU0             	0x02000040	// 02000000, wbregs names: UR0
#define	R_ZIPU1             	0x02000044	// 02000000, wbregs names: UR1
#define	R_ZIPU2             	0x02000048	// 02000000, wbregs names: UR2
#define	R_ZIPU3             	0x0200004c	// 02000000, wbregs names: UR3
#define	R_ZIPU4             	0x02000050	// 02000000, wbregs names: UR4
#define	R_ZIPU5             	0x02000054	// 02000000, wbregs names: UR5
#define	R_ZIPU6             	0x02000058	// 02000000, wbregs names: UR6
#define	R_ZIPU7             	0x0200005c	// 02000000, wbregs names: UR7
#define	R_ZIPU8             	0x02000060	// 02000000, wbregs names: UR8
#define	R_ZIPU9             	0x02000064	// 02000000, wbregs names: UR9
#define	R_ZIPU10            	0x02000068	// 02000000, wbregs names: SR10
#define	R_ZIPU11            	0x0200006c	// 02000000, wbregs names: SR11
#define	R_ZIPU12            	0x02000070	// 02000000, wbregs names: SR12
#define	R_ZIPUSP            	0x02000074	// 02000000, wbregs names: USP, UR13
#define	R_ZIPUCC            	0x02000078	// 02000000, wbregs names: ZIPUCC, UCC
#define	R_ZIPUPC            	0x0200007c	// 02000000, wbregs names: ZIPUPC, UPC
#define	R_ZIPSYSTEM         	0x02000100	// 02000000, wbregs names: ZIPSYSTEM, ZIPSYS


//
// The @REGDEFS.H.DEFNS tag
//
// @REGDEFS.H.DEFNS for masters
#define	BAUDRATE	1000000
// @REGDEFS.H.DEFNS for peripherals
// @REGDEFS.H.DEFNS at the top level
// End of definitions from REGDEFS.H.DEFNS
//
// The @REGDEFS.H.INSERT tag
//
// @REGDEFS.H.INSERT for masters
// @REGDEFS.H.INSERT for peripherals

#define	CPU_GO		0x0000
#define	CPU_RESET	0x0040
#define	CPU_INT		0x0080
#define	CPU_STEP	0x0100
#define	CPU_STALL	0x0200
#define	CPU_HALT	0x0400
#define	CPU_CLRCACHE	0x0800

#define	RESET_ADDRESS	0x01000000

// @REGDEFS.H.INSERT from the top level
typedef	struct {
	unsigned	m_addr;
	const char	*m_name;
} REGNAME;

extern	const	REGNAME	*bregs;
extern	const	int	NREGS;
// #define	NREGS	(sizeof(bregs)/sizeof(bregs[0]))

extern	unsigned	addrdecode(const char *v);
extern	const	char *addrname(const unsigned v);
// End of definitions from REGDEFS.H.INSERT


#endif	// REGDEFS_H
