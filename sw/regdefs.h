////////////////////////////////////////////////////////////////////////////////
//
// Filename:	./regdefs.h
//
// Project:	AXI DMA Check: A utility to measure AXI DMA speeds
//
// DO NOT EDIT THIS FILE!
// Computer Generated: This file is computer generated by AUTOFPGA. DO NOT EDIT.
// DO NOT EDIT THIS FILE!
//
// CmdLine:	/home/dan/work/rnd/opencores/autofpga/trunk/sw/autofpga /home/dan/work/rnd/opencores/autofpga/trunk/sw/autofpga -d autofpga.dbg -o ./ global.txt axibus.txt axiram.txt axidma.txt aximm2s.txt axis2mm.txt controlbus.txt streamsink.txt streamsrc.txt vibus.txt
//
// Creator:	Dan Gisselquist, Ph.D.
//		Gisselquist Technology, LLC
//
////////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2017-2019, Gisselquist Technology, LLC
//
// This program is free software (firmware): you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
// target there if the PDF file isn't present.)  If not, see
// <http://www.gnu.org/licenses/> for a copy.
//
// License:	GPL, v3, as defined and found on www.gnu.org,
//		http://www.gnu.org/licenses/gpl.html
//
//
////////////////////////////////////////////////////////////////////////////////
//
//
#ifndef	REGDEFS_H
#define	REGDEFS_H


//
// The @REGDEFS.H.INCLUDE tag
//
// @REGDEFS.H.INCLUDE for masters
// @REGDEFS.H.INCLUDE for peripherals
// And finally any master REGDEFS.H.INCLUDE tags
// End of definitions from REGDEFS.H.INCLUDE


//
// Register address definitions, from @REGS.#d
//
#define	R_AXIDMACTRL        	0x00000000	// 00000000, wbregs names: AXIDMACTRL
#define	R_AXIDMASRC         	0x00000004	// 00000000, wbregs names: AXIDMASRC
#define	R_AXIDMADST         	0x00000008	// 00000000, wbregs names: AXIDMADST
#define	R_AXIDMALEN         	0x0000000c	// 00000000, wbregs names: AXIDMALEN
// AXI MM2S registers
#define	R_MM2SCTRL          	0x00000010	// 00000010, wbregs names: MM2SCTRL
#define	R_MM2SADDR          	0x00000014	// 00000010, wbregs names: MM2SADDR
#define	R_MM2SLEN           	0x00000018	// 00000010, wbregs names: MM2SLEN
#define	R_S2MMCTRL          	0x00000020	// 00000020, wbregs names: S2MMCTRL
#define	R_S2MMADDR          	0x00000024	// 00000020, wbregs names: S2MMADDR
#define	R_S2MMLEN           	0x00000028	// 00000020, wbregs names: S2MMLEN
#define	R_STREAMSINK_BEATS  	0x00000030	// 00000030, wbregs names: 
#define	R_STREAMSINK_PACKETS	0x00000034	// 00000030, wbregs names: 
#define	R_STREAMSINK_CLOCKS 	0x00000038	// 00000030, wbregs names: 
#define	R_AXIRAM            	0x01000000	// 01000000, wbregs names: AXIRAM, RAM


//
// The @REGDEFS.H.DEFNS tag
//
// @REGDEFS.H.DEFNS for masters
// @REGDEFS.H.DEFNS for peripherals
// @REGDEFS.H.DEFNS at the top level
// End of definitions from REGDEFS.H.DEFNS
//
// The @REGDEFS.H.INSERT tag
//
// @REGDEFS.H.INSERT for masters
// @REGDEFS.H.INSERT for peripherals
// @REGDEFS.H.INSERT from the top level
typedef	struct {
	unsigned	m_addr;
	const char	*m_name;
} REGNAME;

extern	const	REGNAME	*bregs;
extern	const	int	NREGS;
// #define	NREGS	(sizeof(bregs)/sizeof(bregs[0]))

extern	unsigned	addrdecode(const char *v);
extern	const	char *addrname(const unsigned v);
// End of definitions from REGDEFS.H.INSERT


#endif	// REGDEFS_H
