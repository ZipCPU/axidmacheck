################################################################################
##
## Filename: 	autodata/vibus.txt
## {{{
## Project:	AXI DMA Check: A utility to measure AXI DMA speeds
##
## Purpose:	
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
## }}}
## Copyright (C) 2020-2021, Gisselquist Technology, LLC
## {{{
## This program is free software (firmware): you can redistribute it and/or
## modify it under the terms of the GNU General Public License as published
## by the Free Software Foundation, either version 3 of the License, or (at
## your option) any later version.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
## }}}
## License:	GPL, v3, as defined and found on www.gnu.org,
## {{{
##		http://www.gnu.org/licenses/gpl.html
##
################################################################################
##
## }}}
@PREFIX=vibus
@MASTER.BUS=wbu
## @BUS.NAME=wbu
## @BUS.CLOCK=clk
## @BUS.TYPE=axi
## @BUS.IDWIDTH=3
## @BUS.RESET=!i_reset
@MASTER.TYPE=HOST
@MAIN.PORTLIST=
		//
		// Drive the AXI bus from an AXI-lite control
		//
		S_AXI_AWVALID,
		S_AXI_AWREADY,
		S_AXI_AWADDR,
		//
		S_AXI_WVALID,
		S_AXI_WREADY,
		S_AXI_WDATA,
		S_AXI_WSTRB,
		//
		S_AXI_BVALID,
		S_AXI_BREADY,
		S_AXI_BRESP,
		//
		S_AXI_ARVALID,
		S_AXI_ARREADY,
		S_AXI_ARADDR,
		//
		S_AXI_RVALID,
		S_AXI_RREADY,
		S_AXI_RDATA,
		S_AXI_RRESP
@MAIN.IODECL=
	//
	// Drive the AXI bus from an AXI-lite control
	// {{{
	input	wire				S_AXI_AWVALID;
	output	wire				S_AXI_AWREADY;
	input	wire [@$(MASTER.BUS.AWID)-1:0]	S_AXI_AWADDR;
	//
	input	wire				S_AXI_WVALID;
	output	wire				S_AXI_WREADY;
	input	wire [@$(MASTER.BUS.WIDTH)-1:0]	S_AXI_WDATA;
	input wire [@$(MASTER.BUS.WIDTH)/8-1:0]	S_AXI_WSTRB;
	//
	output	wire				S_AXI_BVALID;
	input	wire				S_AXI_BREADY;
	output	wire	[1:0]			S_AXI_BRESP;
	//
	input	wire				S_AXI_ARVALID;
	output	wire				S_AXI_ARREADY;
	input	wire [@$(MASTER.BUS.AWID)-1:0]	S_AXI_ARADDR;
	//
	output	wire					S_AXI_RVALID;
	input	wire					S_AXI_RREADY;
	output	wire	[@$(MASTER.BUS.WIDTH)-1:0]	S_AXI_RDATA;
	output	wire	[1:0]				S_AXI_RRESP;
	// }}}
@MAIN.INSERT=
	////////////////////////////////////////////////////////////////////////
	//
	// External (i.e. Verilator) bus controller
	// {{{
	//

	// Convert from AXI-lite to AXI
	axilite2axi #(
		// {{{
		.C_AXI_ADDR_WIDTH(@$(MASTER.BUS.AWID)),
		.C_AXI_DATA_WIDTH(@$(MASTER.BUS.WIDTH)),
		.C_AXI_ID_WIDTH(@$(MASTER.BUS.IDWIDTH)),
		.C_AXI_WRITE_ID(3'b100),
		.C_AXI_READ_ID(3'b101)
		// }}}
	) @$(PREFIX)i (
		// {{{
		.ACLK(i_clk),
		.ARESETN(!i_reset),
		// AXI-lite input (slave interface)
		// {{{
		.S_AXI_AWVALID(S_AXI_AWVALID),
		.S_AXI_AWREADY(S_AXI_AWREADY),
		.S_AXI_AWADDR( S_AXI_AWADDR),
		.S_AXI_AWPROT( 3'h0),
		//
		.S_AXI_WVALID(S_AXI_WVALID),
		.S_AXI_WREADY(S_AXI_WREADY),
		.S_AXI_WDATA( S_AXI_WDATA),
		.S_AXI_WSTRB( S_AXI_WSTRB),
		//
		.S_AXI_BVALID(S_AXI_BVALID),
		.S_AXI_BREADY(S_AXI_BREADY),
		.S_AXI_BRESP( S_AXI_BRESP),
		//
		.S_AXI_ARVALID(S_AXI_ARVALID),
		.S_AXI_ARREADY(S_AXI_ARREADY),
		.S_AXI_ARADDR( S_AXI_ARADDR),
		.S_AXI_ARPROT( 3'h0),
		//
		.S_AXI_RVALID(S_AXI_RVALID),
		.S_AXI_RREADY(S_AXI_RREADY),
		.S_AXI_RDATA( S_AXI_RDATA),
		.S_AXI_RRESP( S_AXI_RRESP),
		// }}}
		// AXI (full) outputs (master interface)
		// {{{
		@$(MASTER.ANSIPORTLIST)
		// }}}
		// }}}
	);

	// }}}
