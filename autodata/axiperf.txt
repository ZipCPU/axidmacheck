################################################################################
##
## Filename: 	autodata/axiperf.txt
## {{{
## Project:	AXI DMA Check: A utility to measure AXI DMA speeds
##
## Purpose:	Measure the performance of the AXI bus, from the perspective
##		of a particular target.
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
## }}}
## Copyright (C) 2020-2021, Gisselquist Technology, LLC
## {{{
## This program is free software (firmware): you can redistribute it and/or
## modify it under the terms of the GNU General Public License as published
## by the Free Software Foundation, either version 3 of the License, or (at
## your option) any later version.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
## }}}
## License:	GPL, v3, as defined and found on www.gnu.org,
## {{{
##		http://www.gnu.org/licenses/gpl.html
##
################################################################################
##
## }}}
@PREFIX=axiperf
@DEVID=AXIPERF
##
@NADDR=32
@SLAVE.TYPE=DOUBLE
@SLAVE.BUS=axil
##
@TARGETPFX=target
@TARGETAWID=32
@TARGETDWID=32
@TARGETIWID=32
@SLAVE.ANSPREFIX=S_AXIL_
@MAIN.INSERT=
	axiperf #(
		// {{{
		.C_AXI_ADDR_WIDTH(@$(TARGETAWID)),
		.C_AXI_DATA_WIDTH(@$(TARGETDWID)),
		.C_AXI_ID_WIDTH(@$(TARGETIWID))
		// }}}
	) @$(PREFIX)i(
		// {{{
		.S_AXI_ACLK(@$(SLAVE.BUS.CLOCK.WIRE)),
		.S_AXI_ARESETN(@$(SLAVE.BUS.RESET)),
		// Control interface
		// {{{
		@$(SLAVE.ANSIPORTLIST),
		// }}}
		// The bus we are measuring
		// {{{
		.M_AXI_AWVALID(@$(TARGETPFX)_awvalid),
		.M_AXI_AWREADY(@$(TARGETPFX)_awready),
		.M_AXI_AWID(   @$(TARGETPFX)_awid),
		.M_AXI_AWADDR( @$(TARGETPFX)_awaddr[@$(TARGETAWID)-1:0]),
		.M_AXI_AWLEN(  @$(TARGETPFX)_awlen),
		.M_AXI_AWSIZE( @$(TARGETPFX)_awsize),
		.M_AXI_AWBURST(@$(TARGETPFX)_awburst),
		.M_AXI_AWLOCK( @$(TARGETPFX)_awlock),
		.M_AXI_AWCACHE(@$(TARGETPFX)_awcache),
		.M_AXI_AWPROT( @$(TARGETPFX)_awprot),
		.M_AXI_AWQOS(  @$(TARGETPFX)_awqos),
                //
                //
		.M_AXI_WVALID(@$(TARGETPFX)_wvalid),
		.M_AXI_WREADY(@$(TARGETPFX)_wready),
		.M_AXI_WDATA( @$(TARGETPFX)_wdata),
		.M_AXI_WSTRB( @$(TARGETPFX)_wstrb),
		.M_AXI_WLAST( @$(TARGETPFX)_wlast),
		//
		.M_AXI_BVALID(@$(TARGETPFX)_bvalid),
		.M_AXI_BREADY(@$(TARGETPFX)_bready),
		.M_AXI_BID(   @$(TARGETPFX)_bid),
		.M_AXI_BRESP( @$(TARGETPFX)_bresp),
		//
		.M_AXI_ARVALID(@$(TARGETPFX)_arvalid),
		.M_AXI_ARREADY(@$(TARGETPFX)_arready),
		.M_AXI_ARID(   @$(TARGETPFX)_arid),
		.M_AXI_ARADDR( @$(TARGETPFX)_araddr[@$(TARGETAWID)-1:0]),
		.M_AXI_ARLEN(  @$(TARGETPFX)_arlen),
		.M_AXI_ARSIZE( @$(TARGETPFX)_arsize),
		.M_AXI_ARBURST(@$(TARGETPFX)_arburst),
		.M_AXI_ARLOCK( @$(TARGETPFX)_arlock),
		.M_AXI_ARCACHE(@$(TARGETPFX)_arcache),
		.M_AXI_ARPROT( @$(TARGETPFX)_arprot),
		.M_AXI_ARQOS(  @$(TARGETPFX)_arqos),
                //
		.M_AXI_RVALID(@$(TARGETPFX)_rvalid),
		.M_AXI_RREADY(@$(TARGETPFX)_rready),
		.M_AXI_RID(   @$(TARGETPFX)_rid),
		.M_AXI_RDATA( @$(TARGETPFX)_rdata),
		.M_AXI_RLAST( @$(TARGETPFX)_rlast),
		.M_AXI_RRESP( @$(TARGETPFX)_rresp)
		// }}}
		// }}}
	);
@REGS.NOTE=
//
// AXI Performance monitor for @$(DEVID)
//
@REGS.N=32
@REGS.0=0   R_@$(DEVID)ACTIVE    @$(DEVID)ACTIVE
@REGS.1=1   R_@$(DEVID)BURSTSZ   @$(DEVID)BURSTSZ
@REGS.2=2   R_@$(DEVID)WRIDLES   @$(DEVID)WRIDLES
@REGS.3=3   R_@$(DEVID)AWRBURSTS @$(DEVID)AWRBURSTS
@REGS.4=4   R_@$(DEVID)WRBEATS   @$(DEVID)WRBEATS
@REGS.5=5   R_@$(DEVID)AWBYTES   @$(DEVID)AWBYTES
@REGS.6=6   R_@$(DEVID)WBYTES    @$(DEVID)WBYTES
@REGS.7=7   R_@$(DEVID)WRSLOWD   @$(DEVID)WRSLOWD
@REGS.8=8   R_@$(DEVID)WRSTALLS  @$(DEVID)WRSTALLS
@REGS.9=9   R_@$(DEVID)WRADDRLAG @$(DEVID)WRADDRLAG
@REGS.10=10 R_@$(DEVID)WRDATALAG @$(DEVID)WRDATALAG
@REGS.11=11 R_@$(DEVID)AWREARLY  @$(DEVID)AWREARLY
@REGS.12=12 R_@$(DEVID)WREARLYD  @$(DEVID)WREARLYD
@REGS.13=13 R_@$(DEVID)AWSTALL   @$(DEVID)AWSTALL
@REGS.14=14 R_@$(DEVID)EARLYST   @$(DEVID)EARLYST
@REGS.15=15 R_@$(DEVID)WRBLAGS   @$(DEVID)WRBLAGS
@REGS.16=16 R_@$(DEVID)WRBSTALL  @$(DEVID)WRBSTALL
@REGS.17=17 R_@$(DEVID)WRBEND    @$(DEVID)WRBEND
##
@REGS.18=18 R_@$(DEVID)WRBIAS    @$(DEVID)WRBIAS
@REGS.19=19 R_@$(DEVID)WUNUSED   @$(DEVID)WUNUSED
##
@REGS.20=20 R_@$(DEVID)RDIDLES    @$(DEVID)RDIDLES
@REGS.21=21 R_@$(DEVID)RDMAXB     @$(DEVID)RDMAXB
@REGS.22=22 R_@$(DEVID)RDBURSTS   @$(DEVID)RDBURSTS
@REGS.23=23 R_@$(DEVID)RDBEATS    @$(DEVID)RDBEATS
@REGS.24=24 R_@$(DEVID)RDBYTES    @$(DEVID)RDBYTES
@REGS.25=25 R_@$(DEVID)RDARCYCLES @$(DEVID)RDARSCYCLES
@REGS.26=26 R_@$(DEVID)RDARSTALLS @$(DEVID)RDARSTALLS
@REGS.27=27 R_@$(DEVID)RDRSTALLS  @$(DEVID)RDRSTALLS
@REGS.28=28 R_@$(DEVID)RDLAG      @$(DEVID)RDLAG
@REGS.29=29 R_@$(DEVID)RDSLOW     @$(DEVID)RDSLOW
@REGS.30=30 R_@$(DEVID)RDFIRSTLAG @$(DEVID)RDFIRSTLAG
@REGS.31=31 R_@$(DEVID)CONTROL    @$(DEVID)CONTROL

@BDEF.DEFN=
#ifndef	AXIPERF_H
#define	AXIPERF_H

#define	AXIPERF_START		1
#define	AXIPERF_STOP		0
#define	AXIPERF_CLEAR		2
#define	AXIPERF_TRIGGERED	4

typedef struct	AXIPERF_S {
	unsigned	p_active, p_burstsz, p_wridles, p_awrbursts, p_wrbeats,
			p_awbytes, p_wbytes, p_wrslowd, p_wrstalls, p_wraddrlag,
			p_wrdatalag, p_awearly, p_wrearlyd, p_awstall,
			p_wr_early_stall, p_wrblags, p_wrbstall, p_wrbend;
	unsigned	p_wrbias, p_wrunused;
	unsigned	p_rdidles, p_rdmaxb, p_rdbursts, p_rdbeats, p_rdbytes,
			p_arcycles, p_arstalls, p_rdrstalls, p_rdlag, p_rdslow,
			p_rdfirst_lag;
	unsigned	p_control;
} AXIPERF;

#endif
@BDEF.IOTYPE=AXIPERF
@BDEF.OSDEF=_BOARD_HAS_@$(DEVID)
@BDEF.OSVAL=static volatile @$(BDEF.IOTYPE) * const _@$(PREFIX)=((@$(BDEF.IOTYPE) *)@$[0x%08x](REGBASE));
