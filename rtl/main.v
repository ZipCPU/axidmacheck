`timescale	1ps / 1ps
////////////////////////////////////////////////////////////////////////////////
//
// Filename:	./main.v
// {{{
// Project:	AXI DMA Check: A utility to measure AXI DMA speeds
//
// DO NOT EDIT THIS FILE!
// Computer Generated: This file is computer generated by AUTOFPGA. DO NOT EDIT.
// DO NOT EDIT THIS FILE!
//
// CmdLine:	/home/dan/work/rnd/opencores/autofpga/trunk/sw/autofpga /home/dan/work/rnd/opencores/autofpga/trunk/sw/autofpga -d autofpga.dbg -o ./ global.txt axibus.txt axiram.txt axidma.txt aximm2s.txt axis2mm.txt controlbus.txt streamsink.txt streamsrc.txt vibus.txt noconsole.txt
//
// Creator:	Dan Gisselquist, Ph.D.
//		Gisselquist Technology, LLC
//
////////////////////////////////////////////////////////////////////////////////
// }}}
// Copyright (C) 2020-2021, Gisselquist Technology, LLC
// {{{
// This program is free software (firmware): you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
// target there if the PDF file isn't present.)  If not, see
// <http://www.gnu.org/licenses/> for a copy.
// }}}
// License:	GPL, v3, as defined and found on www.gnu.org,
// {{{
//		http://www.gnu.org/licenses/gpl.html
//
////////////////////////////////////////////////////////////////////////////////
//
// }}}
`default_nettype	none
////////////////////////////////////////////////////////////////////////////////
//
// Macro defines
// {{{
//
//
// Here is a list of defines which may be used, post auto-design
// (not post-build), to turn particular peripherals (and bus masters)
// on and off.  In particular, to turn off support for a particular
// design component, just comment out its respective `define below.
//
// These lines are taken from the respective @ACCESS tags for each of our
// components.  If a component doesn't have an @ACCESS tag, it will not
// be listed here.
//
// First, the independent access fields for any bus masters
// And then for the independent peripherals
`define	WBUBUS_MASTER
//
// End of dependency list
//
//
// }}}
////////////////////////////////////////////////////////////////////////////////
//
// Any include files
// {{{
// These are drawn from anything with a MAIN.INCLUDE definition.
// }}}
//
// Finally, we define our main module itself.  We start with the list of
// I/O ports, or wires, passed into (or out of) the main function.
//
// These fields are copied verbatim from the respective I/O port lists,
// from the fields given by @MAIN.PORTLIST
//
module	main(i_clk, i_reset,
	// {{{
		//
		// Drive the AXI bus from an AXI-lite control
		//
		S_AXI_AWVALID,
		S_AXI_AWREADY,
		S_AXI_AWADDR,
		//
		S_AXI_WVALID,
		S_AXI_WREADY,
		S_AXI_WDATA,
		S_AXI_WSTRB,
		//
		S_AXI_BVALID,
		S_AXI_BREADY,
		S_AXI_BRESP,
		//
		S_AXI_ARVALID,
		S_AXI_ARREADY,
		S_AXI_ARADDR,
		//
		S_AXI_RVALID,
		S_AXI_RREADY,
		S_AXI_RDATA,
		S_AXI_RRESP	// }}}
);
////////////////////////////////////////////////////////////////////////////////
//
// Any parameter definitions
// {{{
// These are drawn from anything with a MAIN.PARAM definition.
// As they aren't connected to the toplevel at all, it would
// be best to use localparam over parameter, but here we don't
// check
// }}}
////////////////////////////////////////////////////////////////////////////////
//
// Port declarations
// {{{
// The next step is to declare all of the various ports that were just
// listed above.  
//
// The following declarations are taken from the values of the various
// @MAIN.IODECL keys.
//
	input	wire		i_clk;
	// verilator lint_off UNUSED
	input	wire		i_reset;
	// verilator lint_on UNUSED
	//
	// Drive the AXI bus from an AXI-lite control
	// {{{
	input	wire				S_AXI_AWVALID;
	output	wire				S_AXI_AWREADY;
	input	wire [25-1:0]	S_AXI_AWADDR;
	//
	input	wire				S_AXI_WVALID;
	output	wire				S_AXI_WREADY;
	input	wire [32-1:0]	S_AXI_WDATA;
	input wire [32/8-1:0]	S_AXI_WSTRB;
	//
	output	wire				S_AXI_BVALID;
	input	wire				S_AXI_BREADY;
	output	wire	[1:0]			S_AXI_BRESP;
	//
	input	wire				S_AXI_ARVALID;
	output	wire				S_AXI_ARREADY;
	input	wire [25-1:0]	S_AXI_ARADDR;
	//
	output	wire					S_AXI_RVALID;
	input	wire					S_AXI_RREADY;
	output	wire	[32-1:0]	S_AXI_RDATA;
	output	wire	[1:0]				S_AXI_RRESP;
	// }}}
// }}}
	// Make Verilator happy
	// {{{
	// Defining bus wires for lots of components often ends up with unused
	// wires lying around.  We'll turn off Ver1lator's lint warning
	// here that checks for unused wires.
	// }}}
	// verilator lint_off UNUSED
	////////////////////////////////////////////////////////////////////////
	//
	// Declaring interrupt lines
	// {{{
	// These declarations come from the various components values
	// given under the @INT.<interrupt name>.WIRE key.
	//
	wire	dma_int;	// dma.INT.DMA.WIRE
	wire	mm2s_int;	// mm2s.INT.DMA.WIRE
	wire	s2mm_int;	// s2mm.INT.DMA.WIRE
	// }}}
	////////////////////////////////////////////////////////////////////////
	//
	// Component declarations
	// {{{
	// These declarations come from the @MAIN.DEFNS keys found in the
	// various components comprising the design.
	//
	wire	streamsink_tvalid, streamsink_tready, streamsink_tlast;
	wire	[31:0]	streamsink_tdata;
	reg	streamsrc_tvalid, streamsrc_tlast;
	wire	streamsrc_tready;
	reg	[31:0]	streamsrc_tdata;
	reg	[31:0]	streamsrc_counter;
	// AXI RAM definitions
	// {{{
	wire	axiram_we, axiram_rd;
	wire	[32-1:0]	axiram_wdata;
	wire	[32/8-1:0]	axiram_wstrb;
	reg	[32-1:0]	axiram_rdata;
	wire	[24-$clog2(32/8)-1:0]		axiram_waddr, axiram_raddr;
	reg	[32-1:0]	axiram_mem [0:(4194304-1)];
	integer	axiram_ik;
	// }}}
	// Verilator lint_off UNUSED
	wire	dma_cactive, dma_csysack;
	// Verilator lint_on  UNUSED
	wire	axi_s2mm_wuser;

// }}}
	////////////////////////////////////////////////////////////////////////
	//
	// Declaring interrupt vector wires
	// {{{
	// These declarations come from the various components having
	// PIC and PIC.MAX keys.
	//
	// }}}
	////////////////////////////////////////////////////////////////////////
	//
	// Declare bus signals
	// {{{
	////////////////////////////////////////////////////////////////////////

	// Bus wbu
	// {{{
	// AXI4 master definitions for bus wbu,
	// component vibus, with prefix wbu_vibus
	// {{{
	// Verilator lint_off UNUSED
	wire		wbu_vibus_awvalid;
	wire		wbu_vibus_awready;
	wire	[2:0]	wbu_vibus_awid;
	wire	[24:0]	wbu_vibus_awaddr;
	wire	[7:0]	wbu_vibus_awlen;
	wire	[2:0]	wbu_vibus_awsize;
	wire	[1:0]	wbu_vibus_awburst;
	wire		wbu_vibus_awlock;
	wire	[3:0]	wbu_vibus_awcache;
	wire	[2:0]	wbu_vibus_awprot;
	wire	[3:0]	wbu_vibus_awqos;
	//
	wire		wbu_vibus_wvalid;
	wire		wbu_vibus_wready;
	wire	[31:0]	wbu_vibus_wdata;

	wire	[3:0]	wbu_vibus_wstrb;

	wire		wbu_vibus_wlast;

	wire		wbu_vibus_bvalid;
	wire		wbu_vibus_bready;
	wire	[2:0]	wbu_vibus_bid;
	wire	[1:0]	wbu_vibus_bresp;
	wire		wbu_vibus_arvalid;
	wire		wbu_vibus_arready;
	wire	[2:0]	wbu_vibus_arid;
	wire	[24:0]	wbu_vibus_araddr;
	wire	[7:0]	wbu_vibus_arlen;
	wire	[2:0]	wbu_vibus_arsize;
	wire	[1:0]	wbu_vibus_arburst;
	wire		wbu_vibus_arlock;
	wire	[3:0]	wbu_vibus_arcache;
	wire	[2:0]	wbu_vibus_arprot;
	wire	[3:0]	wbu_vibus_arqos;
	//
	wire		wbu_vibus_rvalid;
	wire		wbu_vibus_rready;
	wire	[2:0]	wbu_vibus_rid;
	wire	[31:0]	wbu_vibus_rdata;

	wire		wbu_vibus_rlast;

	wire	[1:0]	wbu_vibus_rresp;
	// Verilator lint_on  UNUSED
	// }}}

	// Bus wbu has no SINGLE slaves
	//

	// Bus wbu has no DOUBLE slaves
	//
	// AXI4 slave definitions for bus wbu,
	// component wbu, with prefix wbu_wbu
	// {{{
	// Verilator lint_off UNUSED
	wire		wbu_wbu_awvalid;
	wire		wbu_wbu_awready;
	wire	[2:0]	wbu_wbu_awid;
	wire	[24:0]	wbu_wbu_awaddr;
	wire	[7:0]	wbu_wbu_awlen;
	wire	[2:0]	wbu_wbu_awsize;
	wire	[1:0]	wbu_wbu_awburst;
	wire		wbu_wbu_awlock;
	wire	[3:0]	wbu_wbu_awcache;
	wire	[2:0]	wbu_wbu_awprot;
	wire	[3:0]	wbu_wbu_awqos;
	//
	wire		wbu_wbu_wvalid;
	wire		wbu_wbu_wready;
	wire	[31:0]	wbu_wbu_wdata;

	wire	[3:0]	wbu_wbu_wstrb;

	wire		wbu_wbu_wlast;

	wire		wbu_wbu_bvalid;
	wire		wbu_wbu_bready;
	wire	[2:0]	wbu_wbu_bid;
	wire	[1:0]	wbu_wbu_bresp;
	wire		wbu_wbu_arvalid;
	wire		wbu_wbu_arready;
	wire	[2:0]	wbu_wbu_arid;
	wire	[24:0]	wbu_wbu_araddr;
	wire	[7:0]	wbu_wbu_arlen;
	wire	[2:0]	wbu_wbu_arsize;
	wire	[1:0]	wbu_wbu_arburst;
	wire		wbu_wbu_arlock;
	wire	[3:0]	wbu_wbu_arcache;
	wire	[2:0]	wbu_wbu_arprot;
	wire	[3:0]	wbu_wbu_arqos;
	//
	wire		wbu_wbu_rvalid;
	wire		wbu_wbu_rready;
	wire	[2:0]	wbu_wbu_rid;
	wire	[31:0]	wbu_wbu_rdata;

	wire		wbu_wbu_rlast;

	wire	[1:0]	wbu_wbu_rresp;
	// Verilator lint_on  UNUSED
	// }}}
	// }}}
	// Bus axil
	// {{{
	//
	// AXI-lite master definitions for bus axil,
	// component controlbus, with prefix axil_controlbus
	// {{{
	// Verilator lint_off UNUSED
	wire		axil_controlbus_awready, axil_controlbus_wready,
			axil_controlbus_arready;
	wire		axil_controlbus_bvalid, axil_controlbus_rvalid;
	wire	[1:0]	axil_controlbus_bresp, axil_controlbus_rresp;
	wire	[31:0]	axil_controlbus_rdata;

	wire		axil_controlbus_awvalid, axil_controlbus_wvalid,
			axil_controlbus_arvalid,
			axil_controlbus_bready, axil_controlbus_rready;
	wire	[6:0]	axil_controlbus_araddr, axil_controlbus_awaddr;
	wire	[2:0]	axil_controlbus_arprot, axil_controlbus_awprot;
	wire	[31:0]	axil_controlbus_wdata;
	wire	[3:0]	axil_controlbus_wstrb;

	// Verilator lint_on  UNUSED
	// }}}

	// Bus axil has no SINGLE slaves
	//

	// Bus axil is all DOUBLE slaves
	//
	//
	// AXI-lite slave definitions for bus axil,
	// component streamsink, with prefix axil_streamsink
	// {{{
	// Verilator lint_off UNUSED
	wire		axil_streamsink_awready, axil_streamsink_wready,
			axil_streamsink_arready;
	wire		axil_streamsink_bvalid, axil_streamsink_rvalid;
	wire	[1:0]	axil_streamsink_bresp, axil_streamsink_rresp;
	wire	[31:0]	axil_streamsink_rdata;

	wire		axil_streamsink_awvalid, axil_streamsink_wvalid,
			axil_streamsink_arvalid,
			axil_streamsink_bready, axil_streamsink_rready;
	wire	[6:0]	axil_streamsink_araddr, axil_streamsink_awaddr;
	wire	[2:0]	axil_streamsink_arprot, axil_streamsink_awprot;
	wire	[31:0]	axil_streamsink_wdata;
	wire	[3:0]	axil_streamsink_wstrb;

	// Verilator lint_on  UNUSED
	// }}}
	//
	// AXI-lite slave definitions for bus axil,
	// component dma, with prefix axil_dma
	// {{{
	// Verilator lint_off UNUSED
	wire		axil_dma_awready, axil_dma_wready,
			axil_dma_arready;
	wire		axil_dma_bvalid, axil_dma_rvalid;
	wire	[1:0]	axil_dma_bresp, axil_dma_rresp;
	wire	[31:0]	axil_dma_rdata;

	wire		axil_dma_awvalid, axil_dma_wvalid,
			axil_dma_arvalid,
			axil_dma_bready, axil_dma_rready;
	wire	[6:0]	axil_dma_araddr, axil_dma_awaddr;
	wire	[2:0]	axil_dma_arprot, axil_dma_awprot;
	wire	[31:0]	axil_dma_wdata;
	wire	[3:0]	axil_dma_wstrb;

	// Verilator lint_on  UNUSED
	// }}}
	//
	// AXI-lite slave definitions for bus axil,
	// component mm2s, with prefix axil_mm2s
	// {{{
	// Verilator lint_off UNUSED
	wire		axil_mm2s_awready, axil_mm2s_wready,
			axil_mm2s_arready;
	wire		axil_mm2s_bvalid, axil_mm2s_rvalid;
	wire	[1:0]	axil_mm2s_bresp, axil_mm2s_rresp;
	wire	[31:0]	axil_mm2s_rdata;

	wire		axil_mm2s_awvalid, axil_mm2s_wvalid,
			axil_mm2s_arvalid,
			axil_mm2s_bready, axil_mm2s_rready;
	wire	[6:0]	axil_mm2s_araddr, axil_mm2s_awaddr;
	wire	[2:0]	axil_mm2s_arprot, axil_mm2s_awprot;
	wire	[31:0]	axil_mm2s_wdata;
	wire	[3:0]	axil_mm2s_wstrb;

	// Verilator lint_on  UNUSED
	// }}}
	//
	// AXI-lite slave definitions for bus axil,
	// component s2mm, with prefix axil_s2mm
	// {{{
	// Verilator lint_off UNUSED
	wire		axil_s2mm_awready, axil_s2mm_wready,
			axil_s2mm_arready;
	wire		axil_s2mm_bvalid, axil_s2mm_rvalid;
	wire	[1:0]	axil_s2mm_bresp, axil_s2mm_rresp;
	wire	[31:0]	axil_s2mm_rdata;

	wire		axil_s2mm_awvalid, axil_s2mm_wvalid,
			axil_s2mm_arvalid,
			axil_s2mm_bready, axil_s2mm_rready;
	wire	[6:0]	axil_s2mm_araddr, axil_s2mm_awaddr;
	wire	[2:0]	axil_s2mm_arprot, axil_s2mm_awprot;
	wire	[31:0]	axil_s2mm_wdata;
	wire	[3:0]	axil_s2mm_wstrb;

	// Verilator lint_on  UNUSED
	// }}}
	// }}}
	// Bus axi
	// {{{
	// AXI4 master definitions for bus axi,
	// component wbu, with prefix axi_wbu
	// {{{
	// Verilator lint_off UNUSED
	wire		axi_wbu_awvalid;
	wire		axi_wbu_awready;
	wire	[2:0]	axi_wbu_awid;
	wire	[24:0]	axi_wbu_awaddr;
	wire	[7:0]	axi_wbu_awlen;
	wire	[2:0]	axi_wbu_awsize;
	wire	[1:0]	axi_wbu_awburst;
	wire		axi_wbu_awlock;
	wire	[3:0]	axi_wbu_awcache;
	wire	[2:0]	axi_wbu_awprot;
	wire	[3:0]	axi_wbu_awqos;
	//
	wire		axi_wbu_wvalid;
	wire		axi_wbu_wready;
	wire	[31:0]	axi_wbu_wdata;

	wire	[3:0]	axi_wbu_wstrb;

	wire		axi_wbu_wlast;

	wire		axi_wbu_bvalid;
	wire		axi_wbu_bready;
	wire	[2:0]	axi_wbu_bid;
	wire	[1:0]	axi_wbu_bresp;
	wire		axi_wbu_arvalid;
	wire		axi_wbu_arready;
	wire	[2:0]	axi_wbu_arid;
	wire	[24:0]	axi_wbu_araddr;
	wire	[7:0]	axi_wbu_arlen;
	wire	[2:0]	axi_wbu_arsize;
	wire	[1:0]	axi_wbu_arburst;
	wire		axi_wbu_arlock;
	wire	[3:0]	axi_wbu_arcache;
	wire	[2:0]	axi_wbu_arprot;
	wire	[3:0]	axi_wbu_arqos;
	//
	wire		axi_wbu_rvalid;
	wire		axi_wbu_rready;
	wire	[2:0]	axi_wbu_rid;
	wire	[31:0]	axi_wbu_rdata;

	wire		axi_wbu_rlast;

	wire	[1:0]	axi_wbu_rresp;
	// Verilator lint_on  UNUSED
	// }}}
	// AXI4 master definitions for bus axi,
	// component dma, with prefix axi_dma
	// {{{
	// Verilator lint_off UNUSED
	wire		axi_dma_awvalid;
	wire		axi_dma_awready;
	wire	[2:0]	axi_dma_awid;
	wire	[24:0]	axi_dma_awaddr;
	wire	[7:0]	axi_dma_awlen;
	wire	[2:0]	axi_dma_awsize;
	wire	[1:0]	axi_dma_awburst;
	wire		axi_dma_awlock;
	wire	[3:0]	axi_dma_awcache;
	wire	[2:0]	axi_dma_awprot;
	wire	[3:0]	axi_dma_awqos;
	//
	wire		axi_dma_wvalid;
	wire		axi_dma_wready;
	wire	[31:0]	axi_dma_wdata;

	wire	[3:0]	axi_dma_wstrb;

	wire		axi_dma_wlast;

	wire		axi_dma_bvalid;
	wire		axi_dma_bready;
	wire	[2:0]	axi_dma_bid;
	wire	[1:0]	axi_dma_bresp;
	wire		axi_dma_arvalid;
	wire		axi_dma_arready;
	wire	[2:0]	axi_dma_arid;
	wire	[24:0]	axi_dma_araddr;
	wire	[7:0]	axi_dma_arlen;
	wire	[2:0]	axi_dma_arsize;
	wire	[1:0]	axi_dma_arburst;
	wire		axi_dma_arlock;
	wire	[3:0]	axi_dma_arcache;
	wire	[2:0]	axi_dma_arprot;
	wire	[3:0]	axi_dma_arqos;
	//
	wire		axi_dma_rvalid;
	wire		axi_dma_rready;
	wire	[2:0]	axi_dma_rid;
	wire	[31:0]	axi_dma_rdata;

	wire		axi_dma_rlast;

	wire	[1:0]	axi_dma_rresp;
	// Verilator lint_on  UNUSED
	// }}}
	// AXI4 master definitions for bus axi,
	// component mm2s, with prefix axi_mm2s
	// {{{
	// Verilator lint_off UNUSED
	wire		axi_mm2s_awvalid;
	wire		axi_mm2s_awready;
	wire	[2:0]	axi_mm2s_awid;
	wire	[24:0]	axi_mm2s_awaddr;
	wire	[7:0]	axi_mm2s_awlen;
	wire	[2:0]	axi_mm2s_awsize;
	wire	[1:0]	axi_mm2s_awburst;
	wire		axi_mm2s_awlock;
	wire	[3:0]	axi_mm2s_awcache;
	wire	[2:0]	axi_mm2s_awprot;
	wire	[3:0]	axi_mm2s_awqos;
	//
	wire		axi_mm2s_wvalid;
	wire		axi_mm2s_wready;
	wire	[31:0]	axi_mm2s_wdata;

	wire	[3:0]	axi_mm2s_wstrb;

	wire		axi_mm2s_wlast;

	wire		axi_mm2s_bvalid;
	wire		axi_mm2s_bready;
	wire	[2:0]	axi_mm2s_bid;
	wire	[1:0]	axi_mm2s_bresp;
	wire		axi_mm2s_arvalid;
	wire		axi_mm2s_arready;
	wire	[2:0]	axi_mm2s_arid;
	wire	[24:0]	axi_mm2s_araddr;
	wire	[7:0]	axi_mm2s_arlen;
	wire	[2:0]	axi_mm2s_arsize;
	wire	[1:0]	axi_mm2s_arburst;
	wire		axi_mm2s_arlock;
	wire	[3:0]	axi_mm2s_arcache;
	wire	[2:0]	axi_mm2s_arprot;
	wire	[3:0]	axi_mm2s_arqos;
	//
	wire		axi_mm2s_rvalid;
	wire		axi_mm2s_rready;
	wire	[2:0]	axi_mm2s_rid;
	wire	[31:0]	axi_mm2s_rdata;

	wire		axi_mm2s_rlast;

	wire	[1:0]	axi_mm2s_rresp;
	// Verilator lint_on  UNUSED
	// }}}
	// AXI4 master definitions for bus axi,
	// component s2mm, with prefix axi_s2mm
	// {{{
	// Verilator lint_off UNUSED
	wire		axi_s2mm_awvalid;
	wire		axi_s2mm_awready;
	wire	[2:0]	axi_s2mm_awid;
	wire	[24:0]	axi_s2mm_awaddr;
	wire	[7:0]	axi_s2mm_awlen;
	wire	[2:0]	axi_s2mm_awsize;
	wire	[1:0]	axi_s2mm_awburst;
	wire		axi_s2mm_awlock;
	wire	[3:0]	axi_s2mm_awcache;
	wire	[2:0]	axi_s2mm_awprot;
	wire	[3:0]	axi_s2mm_awqos;
	//
	wire		axi_s2mm_wvalid;
	wire		axi_s2mm_wready;
	wire	[31:0]	axi_s2mm_wdata;

	wire	[3:0]	axi_s2mm_wstrb;

	wire		axi_s2mm_wlast;

	wire		axi_s2mm_bvalid;
	wire		axi_s2mm_bready;
	wire	[2:0]	axi_s2mm_bid;
	wire	[1:0]	axi_s2mm_bresp;
	wire		axi_s2mm_arvalid;
	wire		axi_s2mm_arready;
	wire	[2:0]	axi_s2mm_arid;
	wire	[24:0]	axi_s2mm_araddr;
	wire	[7:0]	axi_s2mm_arlen;
	wire	[2:0]	axi_s2mm_arsize;
	wire	[1:0]	axi_s2mm_arburst;
	wire		axi_s2mm_arlock;
	wire	[3:0]	axi_s2mm_arcache;
	wire	[2:0]	axi_s2mm_arprot;
	wire	[3:0]	axi_s2mm_arqos;
	//
	wire		axi_s2mm_rvalid;
	wire		axi_s2mm_rready;
	wire	[2:0]	axi_s2mm_rid;
	wire	[31:0]	axi_s2mm_rdata;

	wire		axi_s2mm_rlast;

	wire	[1:0]	axi_s2mm_rresp;
	// Verilator lint_on  UNUSED
	// }}}

	// Bus axi has no SINGLE slaves
	//

	// Bus axi has no DOUBLE slaves
	//
	// AXI4 slave definitions for bus axi,
	// component controlbus, with prefix axi_controlbus
	// {{{
	// Verilator lint_off UNUSED
	wire		axi_controlbus_awvalid;
	wire		axi_controlbus_awready;
	wire	[2:0]	axi_controlbus_awid;
	wire	[24:0]	axi_controlbus_awaddr;
	wire	[7:0]	axi_controlbus_awlen;
	wire	[2:0]	axi_controlbus_awsize;
	wire	[1:0]	axi_controlbus_awburst;
	wire		axi_controlbus_awlock;
	wire	[3:0]	axi_controlbus_awcache;
	wire	[2:0]	axi_controlbus_awprot;
	wire	[3:0]	axi_controlbus_awqos;
	//
	wire		axi_controlbus_wvalid;
	wire		axi_controlbus_wready;
	wire	[31:0]	axi_controlbus_wdata;

	wire	[3:0]	axi_controlbus_wstrb;

	wire		axi_controlbus_wlast;

	wire		axi_controlbus_bvalid;
	wire		axi_controlbus_bready;
	wire	[2:0]	axi_controlbus_bid;
	wire	[1:0]	axi_controlbus_bresp;
	wire		axi_controlbus_arvalid;
	wire		axi_controlbus_arready;
	wire	[2:0]	axi_controlbus_arid;
	wire	[24:0]	axi_controlbus_araddr;
	wire	[7:0]	axi_controlbus_arlen;
	wire	[2:0]	axi_controlbus_arsize;
	wire	[1:0]	axi_controlbus_arburst;
	wire		axi_controlbus_arlock;
	wire	[3:0]	axi_controlbus_arcache;
	wire	[2:0]	axi_controlbus_arprot;
	wire	[3:0]	axi_controlbus_arqos;
	//
	wire		axi_controlbus_rvalid;
	wire		axi_controlbus_rready;
	wire	[2:0]	axi_controlbus_rid;
	wire	[31:0]	axi_controlbus_rdata;

	wire		axi_controlbus_rlast;

	wire	[1:0]	axi_controlbus_rresp;
	// Verilator lint_on  UNUSED
	// }}}
	// AXI4 slave definitions for bus axi,
	// component axiram, with prefix axi_axiram
	// {{{
	// Verilator lint_off UNUSED
	wire		axi_axiram_awvalid;
	wire		axi_axiram_awready;
	wire	[2:0]	axi_axiram_awid;
	wire	[24:0]	axi_axiram_awaddr;
	wire	[7:0]	axi_axiram_awlen;
	wire	[2:0]	axi_axiram_awsize;
	wire	[1:0]	axi_axiram_awburst;
	wire		axi_axiram_awlock;
	wire	[3:0]	axi_axiram_awcache;
	wire	[2:0]	axi_axiram_awprot;
	wire	[3:0]	axi_axiram_awqos;
	//
	wire		axi_axiram_wvalid;
	wire		axi_axiram_wready;
	wire	[31:0]	axi_axiram_wdata;

	wire	[3:0]	axi_axiram_wstrb;

	wire		axi_axiram_wlast;

	wire		axi_axiram_bvalid;
	wire		axi_axiram_bready;
	wire	[2:0]	axi_axiram_bid;
	wire	[1:0]	axi_axiram_bresp;
	wire		axi_axiram_arvalid;
	wire		axi_axiram_arready;
	wire	[2:0]	axi_axiram_arid;
	wire	[24:0]	axi_axiram_araddr;
	wire	[7:0]	axi_axiram_arlen;
	wire	[2:0]	axi_axiram_arsize;
	wire	[1:0]	axi_axiram_arburst;
	wire		axi_axiram_arlock;
	wire	[3:0]	axi_axiram_arcache;
	wire	[2:0]	axi_axiram_arprot;
	wire	[3:0]	axi_axiram_arqos;
	//
	wire		axi_axiram_rvalid;
	wire		axi_axiram_rready;
	wire	[2:0]	axi_axiram_rid;
	wire	[31:0]	axi_axiram_rdata;

	wire		axi_axiram_rlast;

	wire	[1:0]	axi_axiram_rresp;
	// Verilator lint_on  UNUSED
	// }}}
	// }}}
	// }}}
	////////////////////////////////////////////////////////////////////////
	//
	// Peripheral address decoding, bus handling
	// {{{
	//
	// BUS-LOGIC for wbu
	// {{{
	//
	// Bus wbu has only one master (vibus) and one slave (wbu_wbu)
	// connected to it -- skipping the interconnect
	//
	assign	wbu_wbu_awvalid = wbu_vibus_awvalid;
	assign	wbu_vibus_awready = wbu_wbu_awready;
	assign	wbu_wbu_awid    = wbu_vibus_awid;
	assign	wbu_wbu_awaddr  = wbu_vibus_awaddr;
	assign	wbu_wbu_awlen   = wbu_vibus_awlen;
	assign	wbu_wbu_awsize  = wbu_vibus_awsize;
	assign	wbu_wbu_awburst = wbu_vibus_awburst;
	assign	wbu_wbu_awlock  = wbu_vibus_awlock;
	assign	wbu_wbu_awcache = wbu_vibus_awcache;
	assign	wbu_wbu_awprot  = wbu_vibus_awprot;
	assign	wbu_wbu_awqos   = wbu_vibus_awqos;
	//
	assign	wbu_wbu_wvalid  = wbu_vibus_wvalid;
	assign	wbu_vibus_wready  = wbu_wbu_wready;
	assign	wbu_wbu_wdata   = wbu_vibus_wdata;
	assign	wbu_wbu_wstrb   = wbu_vibus_wstrb;
	assign	wbu_wbu_wlast   = wbu_vibus_wlast;
	//
	assign	wbu_vibus_bvalid  = wbu_wbu_bvalid;
	assign	wbu_wbu_bready  = wbu_vibus_bready;
	assign	wbu_vibus_bid     = wbu_wbu_bid;
	assign	wbu_vibus_bresp   = wbu_wbu_bresp;
	//
	//
	assign	wbu_wbu_arvalid = wbu_vibus_arvalid;
	assign	wbu_vibus_arready = wbu_wbu_arready;
	assign	wbu_wbu_arid    = wbu_vibus_arid;
	assign	wbu_wbu_araddr  = wbu_vibus_araddr;
	assign	wbu_wbu_arlen   = wbu_vibus_arlen;
	assign	wbu_wbu_arsize  = wbu_vibus_arsize;
	assign	wbu_wbu_arburst = wbu_vibus_arburst;
	assign	wbu_wbu_arlock  = wbu_vibus_arlock;
	assign	wbu_wbu_arcache = wbu_vibus_arcache;
	assign	wbu_wbu_arprot  = wbu_vibus_arprot;
	assign	wbu_wbu_arqos   = wbu_vibus_arqos;
	//
	assign	wbu_vibus_rvalid  = wbu_wbu_rvalid;
	assign	wbu_wbu_rready  = wbu_vibus_rready;
	assign	wbu_vibus_rid     = wbu_wbu_rid;
	assign	wbu_vibus_rdata   = wbu_wbu_rdata;
	assign	wbu_vibus_rlast   = wbu_wbu_rlast;
	assign	wbu_vibus_rresp   = wbu_wbu_rresp;

	// End of bus logic for wbu
	// }}}
	//
	// BUS-LOGIC for axil
	// {{{
	//
	// No class SINGLE peripherals on the "axil" bus
	//

	//
	// axil Bus logic to handle 4 DOUBLE slaves
	//
	//
	// Some extra wires to capture combined values--values
	// that will be the same across all slaves of the
	// class
	wire [6:0]	axil_diow_awaddr;
	wire [2:0]	axil_diow_awprot;
	wire [31:0]	axil_diow_wdata;
	wire [3:0]	axil_diow_wstrb;
	wire [6:0]	axil_diow_araddr;
	wire [2:0]	axil_diow_arprot;

	axildouble #(
		// {{{
		.C_AXI_ADDR_WIDTH(7),
		.C_AXI_DATA_WIDTH(32),
		.NS(4),
		.OPT_LOWPOWER(1'b1),
		.SLAVE_ADDR({
			// Address width    = 7
			// Address LSBs     = 0
			// Slave name width = 10
			{ 7'h60 }, //       s2mm: 0x60
			{ 7'h40 }, //       mm2s: 0x40
			{ 7'h20 }, //        dma: 0x20
			{ 7'h00 }  // streamsink: 0x00
		}),
		.SLAVE_MASK({
			// Address width    = 7
			// Address LSBs     = 0
			// Slave name width = 10
			{ 7'h60 }, //       s2mm
			{ 7'h60 }, //       mm2s
			{ 7'h60 }, //        dma
			{ 7'h60 }  // streamsink
		})
		// }}}
	) axil_axildouble(
		// {{{
		.S_AXI_ACLK(i_clk),
		.S_AXI_ARESETN(!i_reset),
		//
		// Slave port
		// {{{
		.S_AXI_AWVALID(axil_controlbus_awvalid),
		.S_AXI_AWREADY(axil_controlbus_awready),
		.S_AXI_AWADDR( axil_controlbus_awaddr[6:0]),
		.S_AXI_AWPROT( axil_controlbus_awprot),
		//
		.S_AXI_WVALID( axil_controlbus_wvalid),
		.S_AXI_WREADY( axil_controlbus_wready),
		.S_AXI_WDATA(  axil_controlbus_wdata),
		.S_AXI_WSTRB(  axil_controlbus_wstrb),
		//
		.S_AXI_BVALID( axil_controlbus_bvalid),
		.S_AXI_BREADY( axil_controlbus_bready),
		.S_AXI_BRESP(  axil_controlbus_bresp),
		//
		// Read connections
		.S_AXI_ARVALID(axil_controlbus_arvalid),
		.S_AXI_ARREADY(axil_controlbus_arready),
		.S_AXI_ARADDR( axil_controlbus_araddr[6:0]),
		.S_AXI_ARPROT( axil_controlbus_arprot),
		//
		.S_AXI_RVALID( axil_controlbus_rvalid),
		.S_AXI_RREADY( axil_controlbus_rready),
		.S_AXI_RDATA(  axil_controlbus_rdata),
		.S_AXI_RRESP(  axil_controlbus_rresp),
		// }}}
		// Connections to slaves
		// {{{
		.M_AXI_AWVALID({
			axil_s2mm_awvalid,
			axil_mm2s_awvalid,
			axil_dma_awvalid,
			axil_streamsink_awvalid
		}),
		.M_AXI_AWADDR( axil_diow_awaddr),
		.M_AXI_AWPROT( axil_diow_awprot),
		.M_AXI_WDATA(  axil_diow_wdata),
		.M_AXI_WSTRB(  axil_diow_wstrb),
		//
		//
		.M_AXI_BRESP({
			axil_s2mm_bresp,
			axil_mm2s_bresp,
			axil_dma_bresp,
			axil_streamsink_bresp
		}),
		// Read connections
		.M_AXI_ARVALID({
			axil_s2mm_arvalid,
			axil_mm2s_arvalid,
			axil_dma_arvalid,
			axil_streamsink_arvalid
		}),
		.M_AXI_ARADDR( axil_diow_araddr),
		.M_AXI_ARPROT( axil_diow_arprot),
		//
		.M_AXI_RDATA({
			axil_s2mm_rdata,
			axil_mm2s_rdata,
			axil_dma_rdata,
			axil_streamsink_rdata
		}),
		.M_AXI_RRESP({
			axil_s2mm_rresp,
			axil_mm2s_rresp,
			axil_dma_rresp,
			axil_streamsink_rresp
		})
		// }}}
		// }}}
	);

	//
	// Now connecting the extra slaves wires to the AXILDOUBLE controller
	//
	// s2mm
	// {{{
	assign axil_s2mm_awaddr = axil_diow_awaddr;
	assign axil_s2mm_awprot = axil_diow_awprot;
	assign axil_s2mm_wvalid = axil_s2mm_awvalid;
	assign axil_s2mm_wdata = axil_diow_wdata;
	assign axil_s2mm_wstrb = axil_diow_wstrb;
	assign axil_s2mm_bready = 1'b1;
	assign axil_s2mm_araddr = axil_diow_araddr;
	assign axil_s2mm_arprot = axil_diow_arprot;
	assign axil_s2mm_rready = 1'b1;
	// }}}
	// mm2s
	// {{{
	assign axil_mm2s_awaddr = axil_diow_awaddr;
	assign axil_mm2s_awprot = axil_diow_awprot;
	assign axil_mm2s_wvalid = axil_mm2s_awvalid;
	assign axil_mm2s_wdata = axil_diow_wdata;
	assign axil_mm2s_wstrb = axil_diow_wstrb;
	assign axil_mm2s_bready = 1'b1;
	assign axil_mm2s_araddr = axil_diow_araddr;
	assign axil_mm2s_arprot = axil_diow_arprot;
	assign axil_mm2s_rready = 1'b1;
	// }}}
	// dma
	// {{{
	assign axil_dma_awaddr = axil_diow_awaddr;
	assign axil_dma_awprot = axil_diow_awprot;
	assign axil_dma_wvalid = axil_dma_awvalid;
	assign axil_dma_wdata = axil_diow_wdata;
	assign axil_dma_wstrb = axil_diow_wstrb;
	assign axil_dma_bready = 1'b1;
	assign axil_dma_araddr = axil_diow_araddr;
	assign axil_dma_arprot = axil_diow_arprot;
	assign axil_dma_rready = 1'b1;
	// }}}
	// streamsink
	// {{{
	assign axil_streamsink_awaddr = axil_diow_awaddr;
	assign axil_streamsink_awprot = axil_diow_awprot;
	assign axil_streamsink_wvalid = axil_streamsink_awvalid;
	assign axil_streamsink_wdata = axil_diow_wdata;
	assign axil_streamsink_wstrb = axil_diow_wstrb;
	assign axil_streamsink_bready = 1'b1;
	assign axil_streamsink_araddr = axil_diow_araddr;
	assign axil_streamsink_arprot = axil_diow_arprot;
	assign axil_streamsink_rready = 1'b1;
	// }}}
	// End of bus logic for axil
	// }}}
	//
	// BUS-LOGIC for axi
	// {{{
	//
	// No class SINGLE peripherals on the "axi" bus
	//

	//
	// No class DOUBLE peripherals on the "axi" bus
	//

	////////////////////////////////////////////////////////////////////////
	//
	// Connect the axi bus components together using the axixbar()
	// {{{
	//
	axixbar #(
		// {{{
		.C_AXI_ADDR_WIDTH(25),
		.C_AXI_DATA_WIDTH(32),
		.C_AXI_ID_WIDTH(3),
		.NM(4), .NS(2),
		.SLAVE_ADDR({
			// Address width    = 25
			// Address LSBs     = 0
			// Slave name width = 10
			{ 25'h1000000 }, //     axiram: 0x1000000
			{ 25'h0800000 }  // controlbus: 0x0800000
		}),
		.SLAVE_MASK({
			// Address width    = 25
			// Address LSBs     = 0
			// Slave name width = 10
			{ 25'h1000000 }, //     axiram
			{ 25'h1800000 }  // controlbus
		}),
		.OPT_LOWPOWER(1'b1)
		// }}}
	) axi_xbar(
		// {{{
		.S_AXI_ACLK(i_clk),
		.S_AXI_ARESETN(!i_reset),
		// Connections from masters
		// {{{
		.S_AXI_AWVALID({
			axi_s2mm_awvalid,
			axi_mm2s_awvalid,
			axi_dma_awvalid,
			axi_wbu_awvalid
		}),
		.S_AXI_AWREADY({
			axi_s2mm_awready,
			axi_mm2s_awready,
			axi_dma_awready,
			axi_wbu_awready
		}),
		.S_AXI_AWID({
			axi_s2mm_awid,
			axi_mm2s_awid,
			axi_dma_awid,
			axi_wbu_awid
		}),
		.S_AXI_AWADDR({
			axi_s2mm_awaddr,
			axi_mm2s_awaddr,
			axi_dma_awaddr,
			axi_wbu_awaddr
		}),
		.S_AXI_AWLEN({
			axi_s2mm_awlen,
			axi_mm2s_awlen,
			axi_dma_awlen,
			axi_wbu_awlen
		}),
		.S_AXI_AWSIZE({
			axi_s2mm_awsize,
			axi_mm2s_awsize,
			axi_dma_awsize,
			axi_wbu_awsize
		}),
		.S_AXI_AWBURST({
			axi_s2mm_awburst,
			axi_mm2s_awburst,
			axi_dma_awburst,
			axi_wbu_awburst
		}),
		.S_AXI_AWLOCK({
			axi_s2mm_awlock,
			axi_mm2s_awlock,
			axi_dma_awlock,
			axi_wbu_awlock
		}),
		.S_AXI_AWCACHE({
			axi_s2mm_awcache,
			axi_mm2s_awcache,
			axi_dma_awcache,
			axi_wbu_awcache
		}),
		.S_AXI_AWPROT({
			axi_s2mm_awprot,
			axi_mm2s_awprot,
			axi_dma_awprot,
			axi_wbu_awprot
		}),
		.S_AXI_AWQOS({
			axi_s2mm_awqos,
			axi_mm2s_awqos,
			axi_dma_awqos,
			axi_wbu_awqos
		}),
		//
		.S_AXI_WVALID({
			axi_s2mm_wvalid,
			axi_mm2s_wvalid,
			axi_dma_wvalid,
			axi_wbu_wvalid
		}),
		.S_AXI_WREADY({
			axi_s2mm_wready,
			axi_mm2s_wready,
			axi_dma_wready,
			axi_wbu_wready
		}),
		.S_AXI_WDATA({
			axi_s2mm_wdata,
			axi_mm2s_wdata,
			axi_dma_wdata,
			axi_wbu_wdata
		}),
		.S_AXI_WSTRB({
			axi_s2mm_wstrb,
			axi_mm2s_wstrb,
			axi_dma_wstrb,
			axi_wbu_wstrb
		}),
		.S_AXI_WLAST({
			axi_s2mm_wlast,
			axi_mm2s_wlast,
			axi_dma_wlast,
			axi_wbu_wlast
		}),
		//
		.S_AXI_BVALID({
			axi_s2mm_bvalid,
			axi_mm2s_bvalid,
			axi_dma_bvalid,
			axi_wbu_bvalid
		}),
		.S_AXI_BREADY({
			axi_s2mm_bready,
			axi_mm2s_bready,
			axi_dma_bready,
			axi_wbu_bready
		}),
		.S_AXI_BID({
			axi_s2mm_bid,
			axi_mm2s_bid,
			axi_dma_bid,
			axi_wbu_bid
		}),
		.S_AXI_BRESP({
			axi_s2mm_bresp,
			axi_mm2s_bresp,
			axi_dma_bresp,
			axi_wbu_bresp
		}),
		//
		// Read connections
		.S_AXI_ARVALID({
			axi_s2mm_arvalid,
			axi_mm2s_arvalid,
			axi_dma_arvalid,
			axi_wbu_arvalid
		}),
		.S_AXI_ARREADY({
			axi_s2mm_arready,
			axi_mm2s_arready,
			axi_dma_arready,
			axi_wbu_arready
		}),
		.S_AXI_ARID({
			axi_s2mm_arid,
			axi_mm2s_arid,
			axi_dma_arid,
			axi_wbu_arid
		}),
		.S_AXI_ARADDR({
			axi_s2mm_araddr,
			axi_mm2s_araddr,
			axi_dma_araddr,
			axi_wbu_araddr
		}),
		.S_AXI_ARLEN({
			axi_s2mm_arlen,
			axi_mm2s_arlen,
			axi_dma_arlen,
			axi_wbu_arlen
		}),
		.S_AXI_ARSIZE({
			axi_s2mm_arsize,
			axi_mm2s_arsize,
			axi_dma_arsize,
			axi_wbu_arsize
		}),
		.S_AXI_ARBURST({
			axi_s2mm_arburst,
			axi_mm2s_arburst,
			axi_dma_arburst,
			axi_wbu_arburst
		}),
		.S_AXI_ARLOCK({
			axi_s2mm_arlock,
			axi_mm2s_arlock,
			axi_dma_arlock,
			axi_wbu_arlock
		}),
		.S_AXI_ARCACHE({
			axi_s2mm_arcache,
			axi_mm2s_arcache,
			axi_dma_arcache,
			axi_wbu_arcache
		}),
		.S_AXI_ARPROT({
			axi_s2mm_arprot,
			axi_mm2s_arprot,
			axi_dma_arprot,
			axi_wbu_arprot
		}),
		.S_AXI_ARQOS({
			axi_s2mm_arqos,
			axi_mm2s_arqos,
			axi_dma_arqos,
			axi_wbu_arqos
		}),
		//
		.S_AXI_RVALID({
			axi_s2mm_rvalid,
			axi_mm2s_rvalid,
			axi_dma_rvalid,
			axi_wbu_rvalid
		}),
		.S_AXI_RREADY({
			axi_s2mm_rready,
			axi_mm2s_rready,
			axi_dma_rready,
			axi_wbu_rready
		}),
		.S_AXI_RID({
			axi_s2mm_rid,
			axi_mm2s_rid,
			axi_dma_rid,
			axi_wbu_rid
		}),
		.S_AXI_RDATA({
			axi_s2mm_rdata,
			axi_mm2s_rdata,
			axi_dma_rdata,
			axi_wbu_rdata
		}),
		.S_AXI_RLAST({
			axi_s2mm_rlast,
			axi_mm2s_rlast,
			axi_dma_rlast,
			axi_wbu_rlast
		}),
		.S_AXI_RRESP({
			axi_s2mm_rresp,
			axi_mm2s_rresp,
			axi_dma_rresp,
			axi_wbu_rresp
		}),
		// }}}
		// Connections to slaves
		// {{{
		.M_AXI_AWVALID({
			axi_axiram_awvalid,
			axi_controlbus_awvalid
		}),
		.M_AXI_AWREADY({
			axi_axiram_awready,
			axi_controlbus_awready
		}),
		.M_AXI_AWID({
			axi_axiram_awid,
			axi_controlbus_awid
		}),
		.M_AXI_AWADDR({
			axi_axiram_awaddr,
			axi_controlbus_awaddr
		}),
		.M_AXI_AWLEN({
			axi_axiram_awlen,
			axi_controlbus_awlen
		}),
		.M_AXI_AWSIZE({
			axi_axiram_awsize,
			axi_controlbus_awsize
		}),
		.M_AXI_AWBURST({
			axi_axiram_awburst,
			axi_controlbus_awburst
		}),
		.M_AXI_AWLOCK({
			axi_axiram_awlock,
			axi_controlbus_awlock
		}),
		.M_AXI_AWCACHE({
			axi_axiram_awcache,
			axi_controlbus_awcache
		}),
		.M_AXI_AWPROT({
			axi_axiram_awprot,
			axi_controlbus_awprot
		}),
		.M_AXI_AWQOS({
			axi_axiram_awqos,
			axi_controlbus_awqos
		}),
		//
		.M_AXI_WVALID({
			axi_axiram_wvalid,
			axi_controlbus_wvalid
		}),
		.M_AXI_WREADY({
			axi_axiram_wready,
			axi_controlbus_wready
		}),
		.M_AXI_WDATA({
			axi_axiram_wdata,
			axi_controlbus_wdata
		}),
		.M_AXI_WSTRB({
			axi_axiram_wstrb,
			axi_controlbus_wstrb
		}),
		.M_AXI_WLAST({
			axi_axiram_wlast,
			axi_controlbus_wlast
		}),
		//
		.M_AXI_BVALID({
			axi_axiram_bvalid,
			axi_controlbus_bvalid
		}),
		.M_AXI_BREADY({
			axi_axiram_bready,
			axi_controlbus_bready
		}),
		.M_AXI_BID({
			axi_axiram_bid,
			axi_controlbus_bid
		}),
		.M_AXI_BRESP({
			axi_axiram_bresp,
			axi_controlbus_bresp
		}),
		//
		// Read connections
		.M_AXI_ARVALID({
			axi_axiram_arvalid,
			axi_controlbus_arvalid
		}),
		.M_AXI_ARREADY({
			axi_axiram_arready,
			axi_controlbus_arready
		}),
		.M_AXI_ARID({
			axi_axiram_arid,
			axi_controlbus_arid
		}),
		.M_AXI_ARADDR({
			axi_axiram_araddr,
			axi_controlbus_araddr
		}),
		.M_AXI_ARLEN({
			axi_axiram_arlen,
			axi_controlbus_arlen
		}),
		.M_AXI_ARSIZE({
			axi_axiram_arsize,
			axi_controlbus_arsize
		}),
		.M_AXI_ARBURST({
			axi_axiram_arburst,
			axi_controlbus_arburst
		}),
		.M_AXI_ARLOCK({
			axi_axiram_arlock,
			axi_controlbus_arlock
		}),
		.M_AXI_ARCACHE({
			axi_axiram_arcache,
			axi_controlbus_arcache
		}),
		.M_AXI_ARPROT({
			axi_axiram_arprot,
			axi_controlbus_arprot
		}),
		.M_AXI_ARQOS({
			axi_axiram_arqos,
			axi_controlbus_arqos
		}),
		//
		.M_AXI_RVALID({
			axi_axiram_rvalid,
			axi_controlbus_rvalid
		}),
		.M_AXI_RREADY({
			axi_axiram_rready,
			axi_controlbus_rready
		}),
		.M_AXI_RID({
			axi_axiram_rid,
			axi_controlbus_rid
		}),
		.M_AXI_RDATA({
			axi_axiram_rdata,
			axi_controlbus_rdata
		}),
		.M_AXI_RLAST({
			axi_axiram_rlast,
			axi_controlbus_rlast
		}),
		.M_AXI_RRESP({
			axi_axiram_rresp,
			axi_controlbus_rresp
		})
		// }}}
		// }}}
	);

		// }}}
	// End of bus logic for axi
	// }}}
	// }}}
	////////////////////////////////////////////////////////////////////////
	//
	// Declare the interrupt busses
	// {{{
	// Interrupt busses are defined by anything with a @PIC tag.
	// The @PIC.BUS tag defines the name of the wire bus below,
	// while the @PIC.MAX tag determines the size of the bus width.
	//
	// For your peripheral to be assigned to this bus, it must have an
	// @INT.NAME.WIRE= tag to define the wire name of the interrupt line,
	// and an @INT.NAME.PIC= tag matching the @PIC.BUS tag of the bus
	// your interrupt will be assigned to.  If an @INT.NAME.ID tag also
	// exists, then your interrupt will be assigned to the position given
	// by the ID# in that tag.
	//
	// }}}
	////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////
	//
	// @MAIN.INSERT and @MAIN.ALT
	// {{{
	////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////
	//
	//
	// Now we turn to defining all of the parts and pieces of what
	// each of the various peripherals does, and what logic it needs.
	//
	// This information comes from the @MAIN.INSERT and @MAIN.ALT tags.
	// If an @ACCESS tag is available, an ifdef is created to handle
	// having the access and not.  If the @ACCESS tag is `defined above
	// then the @MAIN.INSERT code is executed.  If not, the @MAIN.ALT
	// code is exeucted, together with any other cleanup settings that
	// might need to take place--such as returning zeros to the bus,
	// or making sure all of the various interrupt wires are set to
	// zero if the component is not included.
	//
	////////////////////////////////////////////////////////////////////////
	//
	// External (i.e. Verilator) bus controller
	// {{{
	//

	// Convert from AXI-lite to AXI
	axilite2axi #(
		// {{{
		.C_AXI_ADDR_WIDTH(25),
		.C_AXI_DATA_WIDTH(32),
		.C_AXI_ID_WIDTH(3),
		.C_AXI_WRITE_ID(3'b100),
		.C_AXI_READ_ID(3'b101)
		// }}}
	) vibusi (
		// {{{
		.ACLK(i_clk),
		.ARESETN(!i_reset),
		// AXI-lite input (slave interface)
		// {{{
		.S_AXI_AWVALID(S_AXI_AWVALID),
		.S_AXI_AWREADY(S_AXI_AWREADY),
		.S_AXI_AWADDR( S_AXI_AWADDR),
		.S_AXI_AWPROT( 3'h0),
		//
		.S_AXI_WVALID(S_AXI_WVALID),
		.S_AXI_WREADY(S_AXI_WREADY),
		.S_AXI_WDATA( S_AXI_WDATA),
		.S_AXI_WSTRB( S_AXI_WSTRB),
		//
		.S_AXI_BVALID(S_AXI_BVALID),
		.S_AXI_BREADY(S_AXI_BREADY),
		.S_AXI_BRESP( S_AXI_BRESP),
		//
		.S_AXI_ARVALID(S_AXI_ARVALID),
		.S_AXI_ARREADY(S_AXI_ARREADY),
		.S_AXI_ARADDR( S_AXI_ARADDR),
		.S_AXI_ARPROT( 3'h0),
		//
		.S_AXI_RVALID(S_AXI_RVALID),
		.S_AXI_RREADY(S_AXI_RREADY),
		.S_AXI_RDATA( S_AXI_RDATA),
		.S_AXI_RRESP( S_AXI_RRESP),
		// }}}
		// AXI (full) outputs (master interface)
		// {{{
		.M_AXI_AWVALID(wbu_vibus_awvalid),
		.M_AXI_AWREADY(wbu_vibus_awready),
		.M_AXI_AWID(   wbu_vibus_awid),
		.M_AXI_AWADDR( wbu_vibus_awaddr[25-1:0]),
		.M_AXI_AWLEN(  wbu_vibus_awlen),
		.M_AXI_AWSIZE( wbu_vibus_awsize),
		.M_AXI_AWBURST(wbu_vibus_awburst),
		.M_AXI_AWLOCK( wbu_vibus_awlock),
		.M_AXI_AWCACHE(wbu_vibus_awcache),
		.M_AXI_AWPROT( wbu_vibus_awprot),
		.M_AXI_AWQOS(  wbu_vibus_awqos),
		//
		.M_AXI_WVALID(wbu_vibus_wvalid),
		.M_AXI_WREADY(wbu_vibus_wready),
		.M_AXI_WDATA( wbu_vibus_wdata),
		.M_AXI_WSTRB( wbu_vibus_wstrb),
		.M_AXI_WLAST( wbu_vibus_wlast),
		//
		.M_AXI_BVALID(wbu_vibus_bvalid),
		.M_AXI_BREADY(wbu_vibus_bready),
		.M_AXI_BID(   wbu_vibus_bid),
		.M_AXI_BRESP( wbu_vibus_bresp),
		// Read connections
		.M_AXI_ARVALID(wbu_vibus_arvalid),
		.M_AXI_ARREADY(wbu_vibus_arready),
		.M_AXI_ARID(   wbu_vibus_arid),
		.M_AXI_ARADDR( wbu_vibus_araddr[25-1:0]),
		.M_AXI_ARLEN(  wbu_vibus_arlen),
		.M_AXI_ARSIZE( wbu_vibus_arsize),
		.M_AXI_ARBURST(wbu_vibus_arburst),
		.M_AXI_ARLOCK( wbu_vibus_arlock),
		.M_AXI_ARCACHE(wbu_vibus_arcache),
		.M_AXI_ARPROT( wbu_vibus_arprot),
		.M_AXI_ARQOS(  wbu_vibus_arqos),
//
		.M_AXI_RVALID(wbu_vibus_rvalid),
		.M_AXI_RREADY(wbu_vibus_rready),
		.M_AXI_RID(   wbu_vibus_rid),
		.M_AXI_RDATA( wbu_vibus_rdata),
		.M_AXI_RLAST( wbu_vibus_rlast),
		.M_AXI_RRESP( wbu_vibus_rresp)
		// }}}
		// }}}
	);

	// }}}
	////////////////////////////////////////////////////////////////////////
	//
	// Streamsink (streamcounter) : streamsink
	// {{{
	//
	streamcounter #(
		.C_AXIS_DATA_WIDTH(32),
		.OPT_LOWPOWER(1'b1)
	) streamsinki (
		.S_AXI_ACLK(i_clk),
		.S_AXI_ARESETN(!i_reset),
		//
		.S_AXIS_TVALID(streamsink_tvalid),
		.S_AXIS_TREADY(streamsink_tready),
		.S_AXIS_TDATA(streamsink_tdata),
		.S_AXIS_TLAST(streamsink_tlast),
		//
		.S_AXI_AWVALID(axil_streamsink_awvalid),
		.S_AXI_AWREADY(axil_streamsink_awready),
		.S_AXI_AWADDR( axil_streamsink_awaddr[4-1:0]),
		.S_AXI_AWPROT( axil_streamsink_awprot),
//
		.S_AXI_WVALID(axil_streamsink_wvalid),
		.S_AXI_WREADY(axil_streamsink_wready),
		.S_AXI_WDATA( axil_streamsink_wdata),
		.S_AXI_WSTRB( axil_streamsink_wstrb),
//
		.S_AXI_BVALID(axil_streamsink_bvalid),
		.S_AXI_BREADY(axil_streamsink_bready),
		.S_AXI_BRESP( axil_streamsink_bresp),
		// Read connections
		.S_AXI_ARVALID(axil_streamsink_arvalid),
		.S_AXI_ARREADY(axil_streamsink_arready),
		.S_AXI_ARADDR( axil_streamsink_araddr[4-1:0]),
		.S_AXI_ARPROT( axil_streamsink_arprot),
//
		.S_AXI_RVALID(axil_streamsink_rvalid),
		.S_AXI_RREADY(axil_streamsink_rready),
		.S_AXI_RDATA( axil_streamsink_rdata),
		.S_AXI_RRESP( axil_streamsink_rresp)
	);

	// }}}
	////////////////////////////////////////////////////////////////////////
	//
	// AXI to AXI-lite conversion for the controlbus
	// {{{
	//
	axi2axilite #(
		// {{{
		.C_AXI_ADDR_WIDTH(7),
		.C_AXI_DATA_WIDTH(32),
		.C_AXI_ID_WIDTH(3)
		// }}}
	) controlbusi (
		// {{{
		.S_AXI_ACLK(i_clk),
		.S_AXI_ARESETN(!i_reset),
		// Incoming slave connection
		// {{{
		.S_AXI_AWVALID(axi_controlbus_awvalid),
		.S_AXI_AWREADY(axi_controlbus_awready),
		.S_AXI_AWID(   axi_controlbus_awid),
		.S_AXI_AWADDR( axi_controlbus_awaddr[7-1:0]),
		.S_AXI_AWLEN(  axi_controlbus_awlen),
		.S_AXI_AWSIZE( axi_controlbus_awsize),
		.S_AXI_AWBURST(axi_controlbus_awburst),
		.S_AXI_AWLOCK( axi_controlbus_awlock),
		.S_AXI_AWCACHE(axi_controlbus_awcache),
		.S_AXI_AWPROT( axi_controlbus_awprot),
		.S_AXI_AWQOS(  axi_controlbus_awqos),
		//
		.S_AXI_WVALID(axi_controlbus_wvalid),
		.S_AXI_WREADY(axi_controlbus_wready),
		.S_AXI_WDATA( axi_controlbus_wdata),
		.S_AXI_WSTRB( axi_controlbus_wstrb),
		.S_AXI_WLAST( axi_controlbus_wlast),
		//
		.S_AXI_BVALID(axi_controlbus_bvalid),
		.S_AXI_BREADY(axi_controlbus_bready),
		.S_AXI_BID(   axi_controlbus_bid),
		.S_AXI_BRESP( axi_controlbus_bresp),
		// Read connections
		.S_AXI_ARVALID(axi_controlbus_arvalid),
		.S_AXI_ARREADY(axi_controlbus_arready),
		.S_AXI_ARID(   axi_controlbus_arid),
		.S_AXI_ARADDR( axi_controlbus_araddr[7-1:0]),
		.S_AXI_ARLEN(  axi_controlbus_arlen),
		.S_AXI_ARSIZE( axi_controlbus_arsize),
		.S_AXI_ARBURST(axi_controlbus_arburst),
		.S_AXI_ARLOCK( axi_controlbus_arlock),
		.S_AXI_ARCACHE(axi_controlbus_arcache),
		.S_AXI_ARPROT( axi_controlbus_arprot),
		.S_AXI_ARQOS(  axi_controlbus_arqos),
//
		.S_AXI_RVALID(axi_controlbus_rvalid),
		.S_AXI_RREADY(axi_controlbus_rready),
		.S_AXI_RID(   axi_controlbus_rid),
		.S_AXI_RDATA( axi_controlbus_rdata),
		.S_AXI_RLAST( axi_controlbus_rlast),
		.S_AXI_RRESP( axi_controlbus_rresp),
		// }}}
		// Outoing master connection
		// {{{
		.M_AXI_AWVALID(axil_controlbus_awvalid),
		.M_AXI_AWREADY(axil_controlbus_awready),
		.M_AXI_AWADDR( axil_controlbus_awaddr[7-1:0]),
		.M_AXI_AWPROT( axil_controlbus_awprot),
		//
		.M_AXI_WVALID(axil_controlbus_wvalid),
		.M_AXI_WREADY(axil_controlbus_wready),
		.M_AXI_WDATA( axil_controlbus_wdata),
		.M_AXI_WSTRB( axil_controlbus_wstrb),
		//
		.M_AXI_BVALID(axil_controlbus_bvalid),
		.M_AXI_BREADY(axil_controlbus_bready),
		.M_AXI_BRESP( axil_controlbus_bresp),
		// Read connections
		.M_AXI_ARVALID(axil_controlbus_arvalid),
		.M_AXI_ARREADY(axil_controlbus_arready),
		.M_AXI_ARADDR( axil_controlbus_araddr[7-1:0]),
		.M_AXI_ARPROT( axil_controlbus_arprot),
//
		.M_AXI_RVALID(axil_controlbus_rvalid),
		.M_AXI_RREADY(axil_controlbus_rready),
		.M_AXI_RDATA( axil_controlbus_rdata),
		.M_AXI_RRESP( axil_controlbus_rresp)
		// }}}
		// }}}
	);
	// }}}
	////////////////////////////////////////////////////////////////////////
	//
	// AXI streamsrc : streamsrc
	// {{{
	//
	always @(posedge i_clk)
	if (i_reset)
		streamsrc_tvalid <= 0;
	else
		streamsrc_tvalid <= 1;

	always @(*)
		streamsrc_tlast = 1;

	initial	streamsrc_counter = 0;
	always @(posedge i_clk)
	if (i_reset)
		streamsrc_counter <= 0;
	else
		streamsrc_counter <= streamsrc_counter + 1;

	always @(posedge i_clk)
	if (!streamsrc_tvalid || streamsrc_tready)
		streamsrc_tdata <= streamsrc_counter;

	// }}}
`ifdef	WBUBUS_MASTER
	// {{{
	////////////////////////////////////////////////////////////////////////
	//
	// Connect the axi bus to the wbu bus
	// {{{
	assign  axi_wbu_awvalid  = wbu_wbu_awvalid;
	assign  wbu_wbu_awready = axi_wbu_awready;
	assign  axi_wbu_awid     = wbu_wbu_awid;
	assign  axi_wbu_awaddr   = wbu_wbu_awaddr[25-1:0];
	assign  axi_wbu_awlen    = wbu_wbu_awlen;
	assign  axi_wbu_awsize   = wbu_wbu_awsize;
	assign  axi_wbu_awburst  = wbu_wbu_awburst;
	assign  axi_wbu_awlock   = wbu_wbu_awlock;
	assign  axi_wbu_awcache  = wbu_wbu_awcache;
	assign  axi_wbu_awprot   = wbu_wbu_awprot;
	assign  axi_wbu_awqos    = wbu_wbu_awqos;

	assign  axi_wbu_wvalid  = wbu_wbu_wvalid;
	assign  wbu_wbu_wready = axi_wbu_wready;
	assign  axi_wbu_wdata   = wbu_wbu_wdata;
	assign  axi_wbu_wstrb   = wbu_wbu_wstrb;
	assign  axi_wbu_wlast   = wbu_wbu_wlast;

	assign  wbu_wbu_bvalid = axi_wbu_bvalid;
	assign  axi_wbu_bready  = wbu_wbu_bready;
	assign  wbu_wbu_bid    = axi_wbu_bid;
	assign  wbu_wbu_bresp = axi_wbu_bresp;

	assign  axi_wbu_arvalid  = wbu_wbu_arvalid;
	assign  wbu_wbu_arready = axi_wbu_arready;
	assign  axi_wbu_arid     = wbu_wbu_arid;
	assign  axi_wbu_araddr   = wbu_wbu_araddr[25-1:0];
	assign  axi_wbu_arlen    = wbu_wbu_arlen;
	assign  axi_wbu_arsize   = wbu_wbu_arsize;
	assign  axi_wbu_arburst  = wbu_wbu_arburst;
	assign  axi_wbu_arlock   = wbu_wbu_arlock;
	assign  axi_wbu_arcache  = wbu_wbu_arcache;
	assign  axi_wbu_arprot   = wbu_wbu_arprot;
	assign  axi_wbu_arqos    = wbu_wbu_arqos;

	assign  wbu_wbu_rvalid = axi_wbu_rvalid;
	assign  axi_wbu_rready  = wbu_wbu_rready;
	assign  wbu_wbu_rid    = axi_wbu_rid;
	assign  wbu_wbu_rdata  = axi_wbu_rdata;
	assign  wbu_wbu_rlast  = axi_wbu_rlast;
	assign  wbu_wbu_rresp  = axi_wbu_rresp;
	// }}}

	// }}}
`else	// WBUBUS_MASTER
	// {{{
	// Null bus master
	// {{{
	// }}}
	// Null bus slave
	// {{{
	// }}}
	// }}}
`endif	// WBUBUS_MASTER

	////////////////////////////////////////////////////////////////////////
	//
	// AXI RAM
	// {{{
	//
	demofull #(
		// {{{
		.C_S_AXI_ADDR_WIDTH(24),
		.C_S_AXI_DATA_WIDTH(32),
		.C_S_AXI_ID_WIDTH(3)
		// }}}
	) axirami (
		// {{{
		.S_AXI_ACLK(i_clk),
		.S_AXI_ARESETN(!i_reset),
		//
		.o_we(axiram_we),
		.o_waddr(axiram_waddr),
		.o_wdata(axiram_wdata),
		.o_wstrb(axiram_wstrb),
		.o_rd(axiram_rd),
		.o_raddr(axiram_raddr),
		.i_rdata(axiram_rdata),
		//
		.S_AXI_AWVALID(axi_axiram_awvalid),
		.S_AXI_AWREADY(axi_axiram_awready),
		.S_AXI_AWID(   axi_axiram_awid),
		.S_AXI_AWADDR( axi_axiram_awaddr[24-1:0]),
		.S_AXI_AWLEN(  axi_axiram_awlen),
		.S_AXI_AWSIZE( axi_axiram_awsize),
		.S_AXI_AWBURST(axi_axiram_awburst),
		.S_AXI_AWLOCK( axi_axiram_awlock),
		.S_AXI_AWCACHE(axi_axiram_awcache),
		.S_AXI_AWPROT( axi_axiram_awprot),
		.S_AXI_AWQOS(  axi_axiram_awqos),
		//
		.S_AXI_WVALID(axi_axiram_wvalid),
		.S_AXI_WREADY(axi_axiram_wready),
		.S_AXI_WDATA( axi_axiram_wdata),
		.S_AXI_WSTRB( axi_axiram_wstrb),
		.S_AXI_WLAST( axi_axiram_wlast),
		//
		.S_AXI_BVALID(axi_axiram_bvalid),
		.S_AXI_BREADY(axi_axiram_bready),
		.S_AXI_BID(   axi_axiram_bid),
		.S_AXI_BRESP( axi_axiram_bresp),
		// Read connections
		.S_AXI_ARVALID(axi_axiram_arvalid),
		.S_AXI_ARREADY(axi_axiram_arready),
		.S_AXI_ARID(   axi_axiram_arid),
		.S_AXI_ARADDR( axi_axiram_araddr[24-1:0]),
		.S_AXI_ARLEN(  axi_axiram_arlen),
		.S_AXI_ARSIZE( axi_axiram_arsize),
		.S_AXI_ARBURST(axi_axiram_arburst),
		.S_AXI_ARLOCK( axi_axiram_arlock),
		.S_AXI_ARCACHE(axi_axiram_arcache),
		.S_AXI_ARPROT( axi_axiram_arprot),
		.S_AXI_ARQOS(  axi_axiram_arqos),
//
		.S_AXI_RVALID(axi_axiram_rvalid),
		.S_AXI_RREADY(axi_axiram_rready),
		.S_AXI_RID(   axi_axiram_rid),
		.S_AXI_RDATA( axi_axiram_rdata),
		.S_AXI_RLAST( axi_axiram_rlast),
		.S_AXI_RRESP( axi_axiram_rresp)
		// }}}
	);

	// The companion SRAM implementation itself
	// {{{
	always @(posedge i_clk)
	if (axiram_we)
	for(axiram_ik=0; axiram_ik < 32/8;
			axiram_ik = axiram_ik + 1)
	begin
		if (axiram_wstrb[axiram_ik])
			axiram_mem[axiram_waddr][axiram_ik*8 +: 8] <= axiram_wdata[axiram_ik*8 +: 8];
	end

	always @(posedge i_clk)
	if (axiram_rd)
		axiram_rdata <= axiram_mem[axiram_raddr];

	// }}}
	// }}}
	////////////////////////////////////////////////////////////////////////
	//
	// AXI DMA
	// {{{
	//
	axidma #(
		// {{{
		.C_AXI_ADDR_WIDTH(25),
		.C_AXI_DATA_WIDTH(32),
		.C_AXI_ID_WIDTH(3),
`ifdef	VERILATOR
		.OPT_LOWPOWER(1'b1),
		.OPT_CLKGATE(1'b1),
`endif
		.AXI_READ_ID(3'b010),
		.AXI_WRITE_ID(3'b011)
		// }}}
	) dmai (
		// {{{
		.S_AXI_ACLK(i_clk),
		.S_AXI_ARESETN(!i_reset),
		.S_AXIL_AWVALID(axil_dma_awvalid),
		.S_AXIL_AWREADY(axil_dma_awready),
		.S_AXIL_AWADDR( axil_dma_awaddr[5-1:0]),
		.S_AXIL_AWPROT( axil_dma_awprot),
//
		.S_AXIL_WVALID(axil_dma_wvalid),
		.S_AXIL_WREADY(axil_dma_wready),
		.S_AXIL_WDATA( axil_dma_wdata),
		.S_AXIL_WSTRB( axil_dma_wstrb),
//
		.S_AXIL_BVALID(axil_dma_bvalid),
		.S_AXIL_BREADY(axil_dma_bready),
		.S_AXIL_BRESP( axil_dma_bresp),
		// Read connections
		.S_AXIL_ARVALID(axil_dma_arvalid),
		.S_AXIL_ARREADY(axil_dma_arready),
		.S_AXIL_ARADDR( axil_dma_araddr[5-1:0]),
		.S_AXIL_ARPROT( axil_dma_arprot),
//
		.S_AXIL_RVALID(axil_dma_rvalid),
		.S_AXIL_RREADY(axil_dma_rready),
		.S_AXIL_RDATA( axil_dma_rdata),
		.S_AXIL_RRESP( axil_dma_rresp),
		.M_AXI_AWVALID(axi_dma_awvalid),
		.M_AXI_AWREADY(axi_dma_awready),
		.M_AXI_AWID(   axi_dma_awid),
		.M_AXI_AWADDR( axi_dma_awaddr[25-1:0]),
		.M_AXI_AWLEN(  axi_dma_awlen),
		.M_AXI_AWSIZE( axi_dma_awsize),
		.M_AXI_AWBURST(axi_dma_awburst),
		.M_AXI_AWLOCK( axi_dma_awlock),
		.M_AXI_AWCACHE(axi_dma_awcache),
		.M_AXI_AWPROT( axi_dma_awprot),
		.M_AXI_AWQOS(  axi_dma_awqos),
		//
		.M_AXI_WVALID(axi_dma_wvalid),
		.M_AXI_WREADY(axi_dma_wready),
		.M_AXI_WDATA( axi_dma_wdata),
		.M_AXI_WSTRB( axi_dma_wstrb),
		.M_AXI_WLAST( axi_dma_wlast),
		//
		.M_AXI_BVALID(axi_dma_bvalid),
		.M_AXI_BREADY(axi_dma_bready),
		.M_AXI_BID(   axi_dma_bid),
		.M_AXI_BRESP( axi_dma_bresp),
		// Read connections
		.M_AXI_ARVALID(axi_dma_arvalid),
		.M_AXI_ARREADY(axi_dma_arready),
		.M_AXI_ARID(   axi_dma_arid),
		.M_AXI_ARADDR( axi_dma_araddr[25-1:0]),
		.M_AXI_ARLEN(  axi_dma_arlen),
		.M_AXI_ARSIZE( axi_dma_arsize),
		.M_AXI_ARBURST(axi_dma_arburst),
		.M_AXI_ARLOCK( axi_dma_arlock),
		.M_AXI_ARCACHE(axi_dma_arcache),
		.M_AXI_ARPROT( axi_dma_arprot),
		.M_AXI_ARQOS(  axi_dma_arqos),
//
		.M_AXI_RVALID(axi_dma_rvalid),
		.M_AXI_RREADY(axi_dma_rready),
		.M_AXI_RID(   axi_dma_rid),
		.M_AXI_RDATA( axi_dma_rdata),
		.M_AXI_RLAST( axi_dma_rlast),
		.M_AXI_RRESP( axi_dma_rresp),
		.o_int(dma_int)
		// }}}
	);

	// }}}
	////////////////////////////////////////////////////////////////////////
	//
	// AXI MM2S
	// {{{
	//
	aximm2s #(
		// {{{
		.C_AXI_ADDR_WIDTH(25),
		.C_AXI_DATA_WIDTH(32),
		.C_AXI_ID_WIDTH(3),
		.AXI_ID(3'b00)
		// }}}
	) mm2si (
		// {{{
		.S_AXI_ACLK(i_clk),
		.S_AXI_ARESETN(!i_reset),
		//
		.M_AXIS_TVALID(streamsink_tvalid),
		.M_AXIS_TREADY(streamsink_tready),
		.M_AXIS_TDATA(streamsink_tdata),
		.M_AXIS_TLAST(streamsink_tlast),
		.S_AXIL_AWVALID(axil_mm2s_awvalid),
		.S_AXIL_AWREADY(axil_mm2s_awready),
		.S_AXIL_AWADDR( axil_mm2s_awaddr[5-1:0]),
		.S_AXIL_AWPROT( axil_mm2s_awprot),
//
		.S_AXIL_WVALID(axil_mm2s_wvalid),
		.S_AXIL_WREADY(axil_mm2s_wready),
		.S_AXIL_WDATA( axil_mm2s_wdata),
		.S_AXIL_WSTRB( axil_mm2s_wstrb),
//
		.S_AXIL_BVALID(axil_mm2s_bvalid),
		.S_AXIL_BREADY(axil_mm2s_bready),
		.S_AXIL_BRESP( axil_mm2s_bresp),
		// Read connections
		.S_AXIL_ARVALID(axil_mm2s_arvalid),
		.S_AXIL_ARREADY(axil_mm2s_arready),
		.S_AXIL_ARADDR( axil_mm2s_araddr[5-1:0]),
		.S_AXIL_ARPROT( axil_mm2s_arprot),
//
		.S_AXIL_RVALID(axil_mm2s_rvalid),
		.S_AXIL_RREADY(axil_mm2s_rready),
		.S_AXIL_RDATA( axil_mm2s_rdata),
		.S_AXIL_RRESP( axil_mm2s_rresp),
		.M_AXI_ARVALID(axi_mm2s_arvalid),
		.M_AXI_ARREADY(axi_mm2s_arready),
		.M_AXI_ARID(   axi_mm2s_arid),
		.M_AXI_ARADDR( axi_mm2s_araddr[25-1:0]),
		.M_AXI_ARLEN(  axi_mm2s_arlen),
		.M_AXI_ARSIZE( axi_mm2s_arsize),
		.M_AXI_ARBURST(axi_mm2s_arburst),
		.M_AXI_ARLOCK( axi_mm2s_arlock),
		.M_AXI_ARCACHE(axi_mm2s_arcache),
		.M_AXI_ARPROT( axi_mm2s_arprot),
		.M_AXI_ARQOS(  axi_mm2s_arqos),
//
		.M_AXI_RVALID(axi_mm2s_rvalid),
		.M_AXI_RREADY(axi_mm2s_rready),
		.M_AXI_RID(   axi_mm2s_rid),
		.M_AXI_RDATA( axi_mm2s_rdata),
		.M_AXI_RLAST( axi_mm2s_rlast),
		.M_AXI_RRESP( axi_mm2s_rresp),
		.o_int(mm2s_int)
		// }}}
	);

	// Tie off unused BUS values
	assign	axi_mm2s_awvalid = 0;
	assign	axi_mm2s_awid    = 0;
	assign	axi_mm2s_awaddr  = 0;
	assign	axi_mm2s_awlen   = 0;
	assign	axi_mm2s_awsize  = 0;
	assign	axi_mm2s_awburst = 0;
	assign	axi_mm2s_awlock  = 0;
	assign	axi_mm2s_awcache = 0;
	assign	axi_mm2s_awprot  = 0;
	assign	axi_mm2s_awqos   = 0;
	//
	assign	axi_mm2s_wvalid  = 0;
	assign	axi_mm2s_wdata   = 0;
	assign	axi_mm2s_wstrb   = 0;
	assign	axi_mm2s_wlast   = 0;
	//
	assign	axi_mm2s_bready  = 1;
	// }}}
	////////////////////////////////////////////////////////////////////////
	//
	// AXI S2MM
	// {{{
	//
	axis2mm #(
		// {{{
		.C_AXI_ADDR_WIDTH(25),
		.C_AXI_DATA_WIDTH(32),
		.C_AXI_ID_WIDTH(3),
		.AXI_ID(3'b001)
		// }}}
	) s2mmi (
		// {{{
		.S_AXI_ACLK(i_clk),
		.S_AXI_ARESETN(!i_reset),
		//
		.S_AXIS_TVALID(streamsrc_tvalid),
		.S_AXIS_TREADY(streamsrc_tready),
		.S_AXIS_TDATA( streamsrc_tdata),
		.S_AXIS_TLAST( streamsrc_tlast),
		.S_AXIS_TUSER(1'b0),	// TUSER
		//
		.S_AXIL_AWVALID(axil_s2mm_awvalid),
		.S_AXIL_AWREADY(axil_s2mm_awready),
		.S_AXIL_AWADDR( axil_s2mm_awaddr[5-1:0]),
		.S_AXIL_AWPROT( axil_s2mm_awprot),
//
		.S_AXIL_WVALID(axil_s2mm_wvalid),
		.S_AXIL_WREADY(axil_s2mm_wready),
		.S_AXIL_WDATA( axil_s2mm_wdata),
		.S_AXIL_WSTRB( axil_s2mm_wstrb),
//
		.S_AXIL_BVALID(axil_s2mm_bvalid),
		.S_AXIL_BREADY(axil_s2mm_bready),
		.S_AXIL_BRESP( axil_s2mm_bresp),
		// Read connections
		.S_AXIL_ARVALID(axil_s2mm_arvalid),
		.S_AXIL_ARREADY(axil_s2mm_arready),
		.S_AXIL_ARADDR( axil_s2mm_araddr[5-1:0]),
		.S_AXIL_ARPROT( axil_s2mm_arprot),
//
		.S_AXIL_RVALID(axil_s2mm_rvalid),
		.S_AXIL_RREADY(axil_s2mm_rready),
		.S_AXIL_RDATA( axil_s2mm_rdata),
		.S_AXIL_RRESP( axil_s2mm_rresp),
		.M_AXI_AWVALID(axi_s2mm_awvalid),
		.M_AXI_AWREADY(axi_s2mm_awready),
		.M_AXI_AWID(   axi_s2mm_awid),
		.M_AXI_AWADDR( axi_s2mm_awaddr[25-1:0]),
		.M_AXI_AWLEN(  axi_s2mm_awlen),
		.M_AXI_AWSIZE( axi_s2mm_awsize),
		.M_AXI_AWBURST(axi_s2mm_awburst),
		.M_AXI_AWLOCK( axi_s2mm_awlock),
		.M_AXI_AWCACHE(axi_s2mm_awcache),
		.M_AXI_AWPROT( axi_s2mm_awprot),
		.M_AXI_AWQOS(  axi_s2mm_awqos),
		//
		.M_AXI_WVALID(axi_s2mm_wvalid),
		.M_AXI_WREADY(axi_s2mm_wready),
		.M_AXI_WDATA( axi_s2mm_wdata),
		.M_AXI_WSTRB( axi_s2mm_wstrb),
		.M_AXI_WLAST( axi_s2mm_wlast),
		//
		.M_AXI_BVALID(axi_s2mm_bvalid),
		.M_AXI_BREADY(axi_s2mm_bready),
		.M_AXI_BID(   axi_s2mm_bid),
		.M_AXI_BRESP( axi_s2mm_bresp),
		.M_AXI_WUSER(axi_s2mm_wuser),
		.o_int(s2mm_int)
		// }}}
	);

	assign	axi_s2mm_arvalid = 0;
	assign	axi_s2mm_arid    = 0;
	assign	axi_s2mm_araddr  = 0;
	assign	axi_s2mm_arlen   = 0;
	assign	axi_s2mm_arsize  = 0;
	assign	axi_s2mm_arburst = 0;
	assign	axi_s2mm_arlock  = 0;
	assign	axi_s2mm_arcache = 0;
	assign	axi_s2mm_arprot  = 0;
	assign	axi_s2mm_arqos   = 0;
	//
	assign	axi_s2mm_rready  = 0;

	// }}}
	// }}}
endmodule // main.v
