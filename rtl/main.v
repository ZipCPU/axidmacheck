`timescale	1ps / 1ps
////////////////////////////////////////////////////////////////////////////////
//
// Filename:	./main.v
// {{{
// Project:	AXI DMA Check: A utility to measure AXI DMA speeds
//
// DO NOT EDIT THIS FILE!
// Computer Generated: This file is computer generated by AUTOFPGA. DO NOT EDIT.
// DO NOT EDIT THIS FILE!
//
// CmdLine:	/home/dan/work/rnd/opencores/autofpga/trunk/sw/autofpga /home/dan/work/rnd/opencores/autofpga/trunk/sw/autofpga -d autofpga.dbg -o ./ global.txt axibus.txt axiram.txt axidma.txt aximm2s.txt axis2mm.txt controlbus.txt streamsink.txt streamsrc.txt vibus.txt zipaxi.txt busconsole.txt
//
// Creator:	Dan Gisselquist, Ph.D.
//		Gisselquist Technology, LLC
//
////////////////////////////////////////////////////////////////////////////////
// }}}
// Copyright (C) 2020-2021, Gisselquist Technology, LLC
// {{{
// This program is free software (firmware): you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
// target there if the PDF file isn't present.)  If not, see
// <http://www.gnu.org/licenses/> for a copy.
// }}}
// License:	GPL, v3, as defined and found on www.gnu.org,
// {{{
//		http://www.gnu.org/licenses/gpl.html
//
////////////////////////////////////////////////////////////////////////////////
//
// }}}
`default_nettype	none
////////////////////////////////////////////////////////////////////////////////
//
// Macro defines
// {{{
//
//
// Here is a list of defines which may be used, post auto-design
// (not post-build), to turn particular peripherals (and bus masters)
// on and off.  In particular, to turn off support for a particular
// design component, just comment out its respective `define below.
//
// These lines are taken from the respective @ACCESS tags for each of our
// components.  If a component doesn't have an @ACCESS tag, it will not
// be listed here.
//
// First, the independent access fields for any bus masters
`define	WBUBUS_MASTER
// And then for the independent peripherals
`define	INCLUDE_ZIPCPU
`define	BUSCONSOLE_ACCESS
//
// End of dependency list
//
//
// }}}
////////////////////////////////////////////////////////////////////////////////
//
// Any include files
// {{{
// These are drawn from anything with a MAIN.INCLUDE definition.
// }}}
//
// Finally, we define our main module itself.  We start with the list of
// I/O ports, or wires, passed into (or out of) the main function.
//
// These fields are copied verbatim from the respective I/O port lists,
// from the fields given by @MAIN.PORTLIST
//
module	main(i_clk, i_reset,
	// {{{
		// UART/host to wishbone interface
		i_wbu_uart_rx, o_wbu_uart_tx,
		i_cpu_reset,
		//
		// Drive the AXI bus from an AXI-lite control
		//
		S_AXI_AWVALID,
		S_AXI_AWREADY,
		S_AXI_AWADDR,
		//
		S_AXI_WVALID,
		S_AXI_WREADY,
		S_AXI_WDATA,
		S_AXI_WSTRB,
		//
		S_AXI_BVALID,
		S_AXI_BREADY,
		S_AXI_BRESP,
		//
		S_AXI_ARVALID,
		S_AXI_ARREADY,
		S_AXI_ARADDR,
		//
		S_AXI_RVALID,
		S_AXI_RREADY,
		S_AXI_RDATA,
		S_AXI_RRESP	// }}}
);
////////////////////////////////////////////////////////////////////////////////
//
// Any parameter definitions
// {{{
// These are drawn from anything with a MAIN.PARAM definition.
// As they aren't connected to the toplevel at all, it would
// be best to use localparam over parameter, but here we don't
// check
	//
	// (AXI) WBUBUS parameters
	// {{{
	// Baudrate :   1000000
	// Clock    : 100000000
	localparam [23:0] BUSUART = 24'h64;	//   1000000 baud
	localparam	DBGBUSBITS = $clog2(BUSUART);
	// }}}
	//
	//
	// Variables/definitions needed by the ZipCPU BUS master
	//
	//
	// A 32-bit address indicating where the ZipCPU should start running
	// from
	localparam	RESET_ADDRESS = 16777216;
	//
	// The number of valid bits on the bus
	localparam	ZIP_ADDRESS_WIDTH = 25; // Zip-CPU address width
	//
	// Number of ZipCPU interrupts
	localparam	ZIP_INTS = 16;
	//
	// ZIP_START_HALTED
	//
	// A boolean, indicating whether or not the ZipCPU be halted on startup?
	localparam	ZIP_START_HALTED=1'b1;
// }}}
////////////////////////////////////////////////////////////////////////////////
//
// Port declarations
// {{{
// The next step is to declare all of the various ports that were just
// listed above.  
//
// The following declarations are taken from the values of the various
// @MAIN.IODECL keys.
//
	input	wire		i_clk;
	// verilator lint_off UNUSED
	input	wire		i_reset;
	// verilator lint_on UNUSED
	input	wire		i_wbu_uart_rx;
	output	wire		o_wbu_uart_tx;
	input	wire		i_cpu_reset;
	//
	// Drive the AXI bus from an AXI-lite control
	//
	input	wire				S_AXI_AWVALID;
	output	wire				S_AXI_AWREADY;
	input	wire [25-1:0]	S_AXI_AWADDR;
	//
	input	wire				S_AXI_WVALID;
	output	wire				S_AXI_WREADY;
	input	wire [32-1:0]	S_AXI_WDATA;
	input wire [32/8-1:0]	S_AXI_WSTRB;
	//
	output	wire				S_AXI_BVALID;
	input	wire				S_AXI_BREADY;
	output	wire	[1:0]			S_AXI_BRESP;
	//
	input	wire				S_AXI_ARVALID;
	output	wire				S_AXI_ARREADY;
	input	wire [25-1:0]	S_AXI_ARADDR;
	//
	output	wire					S_AXI_RVALID;
	input	wire					S_AXI_RREADY;
	output	wire	[32-1:0]	S_AXI_RDATA;
	output	wire	[1:0]				S_AXI_RRESP;
// }}}
	// Make Verilator happy
	// {{{
	// Defining bus wires for lots of components often ends up with unused
	// wires lying around.  We'll turn off Ver1lator's lint warning
	// here that checks for unused wires.
	// }}}
	// verilator lint_off UNUSED
	////////////////////////////////////////////////////////////////////////
	//
	// Declaring interrupt lines
	// {{{
	// These declarations come from the various components values
	// given under the @INT.<interrupt name>.WIRE key.
	//
	wire	zip_cpu_int;	// zip.INT.ZIP.WIRE
	wire	s2mm_int;	// s2mm.INT.DMA.WIRE
	wire	dma_int;	// dma.INT.DMA.WIRE
	wire	uartrxf_int;	// uart.INT.UARTRXF.WIRE
	wire	uarttx_int;	// uart.INT.UARTTX.WIRE
	wire	uarttxf_int;	// uart.INT.UARTTXF.WIRE
	wire	uartrx_int;	// uart.INT.UARTRX.WIRE
	wire	mm2s_int;	// mm2s.INT.DMA.WIRE
	// }}}
	////////////////////////////////////////////////////////////////////////
	//
	// Component declarations
	// {{{
	// These declarations come from the @MAIN.DEFNS keys found in the
	// various components comprising the design.
	//
	//
	// CONSOLE interface
	// {{{
	//
	wire	[7:0]	wbu_rx_data, wbu_tx_data;
	wire		wbu_rx_stb;
	wire		wbu_tx_stb, wbu_tx_busy;

	wire	w_ck_uart, w_uart_tx;
	// }}}
	// ZipSystem/ZipCPU connection definitions
	// All we define here is a set of scope wires
	wire	[31:0]	zip_debug;
	wire		zip_trigger;
	wire	[ZIP_INTS-1:0] zip_int_vector;
	wire	axi_s2mm_wuser;
	wire	axiram_we, axiram_rd;
	wire	[32-1:0]	axiram_wdata;
	wire	[32/8-1:0]	axiram_wstrb;
	reg	[32-1:0]	axiram_rdata;
	wire	[24-2-1:0]		axiram_waddr, axiram_raddr;
	reg	[32-1:0]	axiram_mem [0:(4194304-1)];
	integer	axiram_ik;

	reg	streamsrc_tvalid, streamsrc_tlast;
	wire	streamsrc_tready;
	reg	[31:0]	streamsrc_tdata;
	reg	[31:0]	streamsrc_counter;
	// Console definitions
	wire		w_console_rx_stb, w_console_tx_stb, w_console_busy;
	wire	[6:0]	w_console_rx_data, w_console_tx_data;
	wire	streamsink_tvalid, streamsink_tready, streamsink_tlast;
	wire	[31:0]	streamsink_tdata;
	wire	axilp_gie, axilp_cmd_reset, axilp_cpu_halted, axilp_icount,
		axilp_opstall, axilp_pfstall, axilp_watchdog;

// }}}
	////////////////////////////////////////////////////////////////////////
	//
	// Declaring interrupt vector wires
	// {{{
	// These declarations come from the various components having
	// PIC and PIC.MAX keys.
	//
	wire	[14:0]	sys_int_vector;
	wire	[14:0]	alt_int_vector;
	// }}}
	////////////////////////////////////////////////////////////////////////
	//
	// Declare bus signals
	// {{{
	////////////////////////////////////////////////////////////////////////

	// Bus wbu
	// {{{
	// AXI4 slave definitions for bus wbu,
	// slave wbu, with prefix wbu
	// {{{
	wire		wbu_awvalid;
	wire		wbu_awready;
	wire	[1:0]	wbu_awid;
	wire	[8:0]	wbu_awaddr;
	wire	[7:0]	wbu_awlen;
	wire	[2:0]	wbu_awsize;
	wire	[1:0]	wbu_awburst;
	wire		wbu_awlock;
	wire	[3:0]	wbu_awcache;
	wire	[2:0]	wbu_awprot;
	wire	[3:0]	wbu_awqos;
	//
	wire		wbu_wvalid;
	wire		wbu_wready;
	wire	[31:0]	wbu_wdata;

	wire	[3:0]	wbu_wstrb;

	wire		wbu_wlast;

	wire		wbu_bvalid;
	wire		wbu_bready;
	wire	[1:0]	wbu_bid;
	wire	[1:0]	wbu_bresp;
	wire		wbu_arvalid;
	wire		wbu_arready;
	wire	[1:0]	wbu_arid;
	wire	[8:0]	wbu_araddr;
	wire	[7:0]	wbu_arlen;
	wire	[2:0]	wbu_arsize;
	wire	[1:0]	wbu_arburst;
	wire		wbu_arlock;
	wire	[3:0]	wbu_arcache;
	wire	[2:0]	wbu_arprot;
	wire	[3:0]	wbu_arqos;
	//
	wire		wbu_rvalid;
	wire		wbu_rready;
	wire	[1:0]	wbu_rid;
	wire	[31:0]	wbu_rdata;

	wire		wbu_rlast;

	wire	[1:0]	wbu_rresp;
	// }}}

	// Bus wbu has no SINGLE slaves
	//

	// Bus wbu has no DOUBLE slaves
	//
	// AXI4 slave definitions for bus wbu,
	// slave dbgaxil, with prefix wbu_dbgaxil
	// {{{
	wire		wbu_dbgaxil_awvalid;
	wire		wbu_dbgaxil_awready;
	wire	[1:0]	wbu_dbgaxil_awid;
	wire	[8:0]	wbu_dbgaxil_awaddr;
	wire	[7:0]	wbu_dbgaxil_awlen;
	wire	[2:0]	wbu_dbgaxil_awsize;
	wire	[1:0]	wbu_dbgaxil_awburst;
	wire		wbu_dbgaxil_awlock;
	wire	[3:0]	wbu_dbgaxil_awcache;
	wire	[2:0]	wbu_dbgaxil_awprot;
	wire	[3:0]	wbu_dbgaxil_awqos;
	//
	wire		wbu_dbgaxil_wvalid;
	wire		wbu_dbgaxil_wready;
	wire	[31:0]	wbu_dbgaxil_wdata;

	wire	[3:0]	wbu_dbgaxil_wstrb;

	wire		wbu_dbgaxil_wlast;

	wire		wbu_dbgaxil_bvalid;
	wire		wbu_dbgaxil_bready;
	wire	[1:0]	wbu_dbgaxil_bid;
	wire	[1:0]	wbu_dbgaxil_bresp;
	wire		wbu_dbgaxil_arvalid;
	wire		wbu_dbgaxil_arready;
	wire	[1:0]	wbu_dbgaxil_arid;
	wire	[8:0]	wbu_dbgaxil_araddr;
	wire	[7:0]	wbu_dbgaxil_arlen;
	wire	[2:0]	wbu_dbgaxil_arsize;
	wire	[1:0]	wbu_dbgaxil_arburst;
	wire		wbu_dbgaxil_arlock;
	wire	[3:0]	wbu_dbgaxil_arcache;
	wire	[2:0]	wbu_dbgaxil_arprot;
	wire	[3:0]	wbu_dbgaxil_arqos;
	//
	wire		wbu_dbgaxil_rvalid;
	wire		wbu_dbgaxil_rready;
	wire	[1:0]	wbu_dbgaxil_rid;
	wire	[31:0]	wbu_dbgaxil_rdata;

	wire		wbu_dbgaxil_rlast;

	wire	[1:0]	wbu_dbgaxil_rresp;
	// }}}
	// }}}
	// Bus dbgaxil
	// {{{
	//	// AXI-lite slave definitions for bus dbgaxil,
	// component dbgaxil, with prefix dbgaxil_dbgaxil
	//
	// Verilator lint_off UNUSED
	wire		dbgaxil_dbgaxil_awready, dbgaxil_dbgaxil_wready,
			dbgaxil_dbgaxil_arready;
	wire		dbgaxil_dbgaxil_bvalid, dbgaxil_dbgaxil_rvalid;
	wire	[1:0]	dbgaxil_dbgaxil_bresp, dbgaxil_dbgaxil_rresp;
	wire	[31:0]	dbgaxil_dbgaxil_rdata;

	wire		dbgaxil_dbgaxil_awvalid, dbgaxil_dbgaxil_wvalid,
			dbgaxil_dbgaxil_arvalid,
			dbgaxil_dbgaxil_bready, dbgaxil_dbgaxil_rready;
	wire	[8:0]	dbgaxil_dbgaxil_araddr, dbgaxil_dbgaxil_awaddr;
	wire	[2:0]	dbgaxil_dbgaxil_arprot, dbgaxil_dbgaxil_awprot;
	wire	[31:0]	dbgaxil_dbgaxil_wdata;
	wire	[3:0]	dbgaxil_dbgaxil_wstrb;

	// Verilator lint_on  UNUSED

	// Bus dbgaxil has no SINGLE slaves
	//

	// Bus dbgaxil has no DOUBLE slaves
	//
	//	// AXI-lite slave definitions for bus dbgaxil,
	// component zip, with prefix dbgaxil_zip
	//
	// Verilator lint_off UNUSED
	wire		dbgaxil_zip_awready, dbgaxil_zip_wready,
			dbgaxil_zip_arready;
	wire		dbgaxil_zip_bvalid, dbgaxil_zip_rvalid;
	wire	[1:0]	dbgaxil_zip_bresp, dbgaxil_zip_rresp;
	wire	[31:0]	dbgaxil_zip_rdata;

	wire		dbgaxil_zip_awvalid, dbgaxil_zip_wvalid,
			dbgaxil_zip_arvalid,
			dbgaxil_zip_bready, dbgaxil_zip_rready;
	wire	[8:0]	dbgaxil_zip_araddr, dbgaxil_zip_awaddr;
	wire	[2:0]	dbgaxil_zip_arprot, dbgaxil_zip_awprot;
	wire	[31:0]	dbgaxil_zip_wdata;
	wire	[3:0]	dbgaxil_zip_wstrb;

	// Verilator lint_on  UNUSED
	// }}}
	// Bus axi
	// {{{
	// AXI4 slave definitions for bus axi,
	// slave zip, with prefix axi_zip
	// {{{
	wire		axi_zip_awvalid;
	wire		axi_zip_awready;
	wire	[2:0]	axi_zip_awid;
	wire	[24:0]	axi_zip_awaddr;
	wire	[7:0]	axi_zip_awlen;
	wire	[2:0]	axi_zip_awsize;
	wire	[1:0]	axi_zip_awburst;
	wire		axi_zip_awlock;
	wire	[3:0]	axi_zip_awcache;
	wire	[2:0]	axi_zip_awprot;
	wire	[3:0]	axi_zip_awqos;
	//
	wire		axi_zip_wvalid;
	wire		axi_zip_wready;
	wire	[31:0]	axi_zip_wdata;

	wire	[3:0]	axi_zip_wstrb;

	wire		axi_zip_wlast;

	wire		axi_zip_bvalid;
	wire		axi_zip_bready;
	wire	[2:0]	axi_zip_bid;
	wire	[1:0]	axi_zip_bresp;
	wire		axi_zip_arvalid;
	wire		axi_zip_arready;
	wire	[2:0]	axi_zip_arid;
	wire	[24:0]	axi_zip_araddr;
	wire	[7:0]	axi_zip_arlen;
	wire	[2:0]	axi_zip_arsize;
	wire	[1:0]	axi_zip_arburst;
	wire		axi_zip_arlock;
	wire	[3:0]	axi_zip_arcache;
	wire	[2:0]	axi_zip_arprot;
	wire	[3:0]	axi_zip_arqos;
	//
	wire		axi_zip_rvalid;
	wire		axi_zip_rready;
	wire	[2:0]	axi_zip_rid;
	wire	[31:0]	axi_zip_rdata;

	wire		axi_zip_rlast;

	wire	[1:0]	axi_zip_rresp;
	// }}}
	// AXI4 slave definitions for bus axi,
	// slave s2mm, with prefix axi_s2mm
	// {{{
	wire		axi_s2mm_awvalid;
	wire		axi_s2mm_awready;
	wire	[2:0]	axi_s2mm_awid;
	wire	[24:0]	axi_s2mm_awaddr;
	wire	[7:0]	axi_s2mm_awlen;
	wire	[2:0]	axi_s2mm_awsize;
	wire	[1:0]	axi_s2mm_awburst;
	wire		axi_s2mm_awlock;
	wire	[3:0]	axi_s2mm_awcache;
	wire	[2:0]	axi_s2mm_awprot;
	wire	[3:0]	axi_s2mm_awqos;
	//
	wire		axi_s2mm_wvalid;
	wire		axi_s2mm_wready;
	wire	[31:0]	axi_s2mm_wdata;

	wire	[3:0]	axi_s2mm_wstrb;

	wire		axi_s2mm_wlast;

	wire		axi_s2mm_bvalid;
	wire		axi_s2mm_bready;
	wire	[2:0]	axi_s2mm_bid;
	wire	[1:0]	axi_s2mm_bresp;
	wire		axi_s2mm_arvalid;
	wire		axi_s2mm_arready;
	wire	[2:0]	axi_s2mm_arid;
	wire	[24:0]	axi_s2mm_araddr;
	wire	[7:0]	axi_s2mm_arlen;
	wire	[2:0]	axi_s2mm_arsize;
	wire	[1:0]	axi_s2mm_arburst;
	wire		axi_s2mm_arlock;
	wire	[3:0]	axi_s2mm_arcache;
	wire	[2:0]	axi_s2mm_arprot;
	wire	[3:0]	axi_s2mm_arqos;
	//
	wire		axi_s2mm_rvalid;
	wire		axi_s2mm_rready;
	wire	[2:0]	axi_s2mm_rid;
	wire	[31:0]	axi_s2mm_rdata;

	wire		axi_s2mm_rlast;

	wire	[1:0]	axi_s2mm_rresp;
	// }}}
	// AXI4 slave definitions for bus axi,
	// slave dma, with prefix axi_dma
	// {{{
	wire		axi_dma_awvalid;
	wire		axi_dma_awready;
	wire	[2:0]	axi_dma_awid;
	wire	[24:0]	axi_dma_awaddr;
	wire	[7:0]	axi_dma_awlen;
	wire	[2:0]	axi_dma_awsize;
	wire	[1:0]	axi_dma_awburst;
	wire		axi_dma_awlock;
	wire	[3:0]	axi_dma_awcache;
	wire	[2:0]	axi_dma_awprot;
	wire	[3:0]	axi_dma_awqos;
	//
	wire		axi_dma_wvalid;
	wire		axi_dma_wready;
	wire	[31:0]	axi_dma_wdata;

	wire	[3:0]	axi_dma_wstrb;

	wire		axi_dma_wlast;

	wire		axi_dma_bvalid;
	wire		axi_dma_bready;
	wire	[2:0]	axi_dma_bid;
	wire	[1:0]	axi_dma_bresp;
	wire		axi_dma_arvalid;
	wire		axi_dma_arready;
	wire	[2:0]	axi_dma_arid;
	wire	[24:0]	axi_dma_araddr;
	wire	[7:0]	axi_dma_arlen;
	wire	[2:0]	axi_dma_arsize;
	wire	[1:0]	axi_dma_arburst;
	wire		axi_dma_arlock;
	wire	[3:0]	axi_dma_arcache;
	wire	[2:0]	axi_dma_arprot;
	wire	[3:0]	axi_dma_arqos;
	//
	wire		axi_dma_rvalid;
	wire		axi_dma_rready;
	wire	[2:0]	axi_dma_rid;
	wire	[31:0]	axi_dma_rdata;

	wire		axi_dma_rlast;

	wire	[1:0]	axi_dma_rresp;
	// }}}
	// AXI4 slave definitions for bus axi,
	// slave cpudata, with prefix axi_cpudata
	// {{{
	wire		axi_cpudata_awvalid;
	wire		axi_cpudata_awready;
	wire	[2:0]	axi_cpudata_awid;
	wire	[24:0]	axi_cpudata_awaddr;
	wire	[7:0]	axi_cpudata_awlen;
	wire	[2:0]	axi_cpudata_awsize;
	wire	[1:0]	axi_cpudata_awburst;
	wire		axi_cpudata_awlock;
	wire	[3:0]	axi_cpudata_awcache;
	wire	[2:0]	axi_cpudata_awprot;
	wire	[3:0]	axi_cpudata_awqos;
	//
	wire		axi_cpudata_wvalid;
	wire		axi_cpudata_wready;
	wire	[31:0]	axi_cpudata_wdata;

	wire	[3:0]	axi_cpudata_wstrb;

	wire		axi_cpudata_wlast;

	wire		axi_cpudata_bvalid;
	wire		axi_cpudata_bready;
	wire	[2:0]	axi_cpudata_bid;
	wire	[1:0]	axi_cpudata_bresp;
	wire		axi_cpudata_arvalid;
	wire		axi_cpudata_arready;
	wire	[2:0]	axi_cpudata_arid;
	wire	[24:0]	axi_cpudata_araddr;
	wire	[7:0]	axi_cpudata_arlen;
	wire	[2:0]	axi_cpudata_arsize;
	wire	[1:0]	axi_cpudata_arburst;
	wire		axi_cpudata_arlock;
	wire	[3:0]	axi_cpudata_arcache;
	wire	[2:0]	axi_cpudata_arprot;
	wire	[3:0]	axi_cpudata_arqos;
	//
	wire		axi_cpudata_rvalid;
	wire		axi_cpudata_rready;
	wire	[2:0]	axi_cpudata_rid;
	wire	[31:0]	axi_cpudata_rdata;

	wire		axi_cpudata_rlast;

	wire	[1:0]	axi_cpudata_rresp;
	// }}}
	// AXI4 slave definitions for bus axi,
	// slave vibus, with prefix axi_vibus
	// {{{
	wire		axi_vibus_awvalid;
	wire		axi_vibus_awready;
	wire	[2:0]	axi_vibus_awid;
	wire	[24:0]	axi_vibus_awaddr;
	wire	[7:0]	axi_vibus_awlen;
	wire	[2:0]	axi_vibus_awsize;
	wire	[1:0]	axi_vibus_awburst;
	wire		axi_vibus_awlock;
	wire	[3:0]	axi_vibus_awcache;
	wire	[2:0]	axi_vibus_awprot;
	wire	[3:0]	axi_vibus_awqos;
	//
	wire		axi_vibus_wvalid;
	wire		axi_vibus_wready;
	wire	[31:0]	axi_vibus_wdata;

	wire	[3:0]	axi_vibus_wstrb;

	wire		axi_vibus_wlast;

	wire		axi_vibus_bvalid;
	wire		axi_vibus_bready;
	wire	[2:0]	axi_vibus_bid;
	wire	[1:0]	axi_vibus_bresp;
	wire		axi_vibus_arvalid;
	wire		axi_vibus_arready;
	wire	[2:0]	axi_vibus_arid;
	wire	[24:0]	axi_vibus_araddr;
	wire	[7:0]	axi_vibus_arlen;
	wire	[2:0]	axi_vibus_arsize;
	wire	[1:0]	axi_vibus_arburst;
	wire		axi_vibus_arlock;
	wire	[3:0]	axi_vibus_arcache;
	wire	[2:0]	axi_vibus_arprot;
	wire	[3:0]	axi_vibus_arqos;
	//
	wire		axi_vibus_rvalid;
	wire		axi_vibus_rready;
	wire	[2:0]	axi_vibus_rid;
	wire	[31:0]	axi_vibus_rdata;

	wire		axi_vibus_rlast;

	wire	[1:0]	axi_vibus_rresp;
	// }}}
	// AXI4 slave definitions for bus axi,
	// slave mm2s, with prefix axi_mm2s
	// {{{
	wire		axi_mm2s_awvalid;
	wire		axi_mm2s_awready;
	wire	[2:0]	axi_mm2s_awid;
	wire	[24:0]	axi_mm2s_awaddr;
	wire	[7:0]	axi_mm2s_awlen;
	wire	[2:0]	axi_mm2s_awsize;
	wire	[1:0]	axi_mm2s_awburst;
	wire		axi_mm2s_awlock;
	wire	[3:0]	axi_mm2s_awcache;
	wire	[2:0]	axi_mm2s_awprot;
	wire	[3:0]	axi_mm2s_awqos;
	//
	wire		axi_mm2s_wvalid;
	wire		axi_mm2s_wready;
	wire	[31:0]	axi_mm2s_wdata;

	wire	[3:0]	axi_mm2s_wstrb;

	wire		axi_mm2s_wlast;

	wire		axi_mm2s_bvalid;
	wire		axi_mm2s_bready;
	wire	[2:0]	axi_mm2s_bid;
	wire	[1:0]	axi_mm2s_bresp;
	wire		axi_mm2s_arvalid;
	wire		axi_mm2s_arready;
	wire	[2:0]	axi_mm2s_arid;
	wire	[24:0]	axi_mm2s_araddr;
	wire	[7:0]	axi_mm2s_arlen;
	wire	[2:0]	axi_mm2s_arsize;
	wire	[1:0]	axi_mm2s_arburst;
	wire		axi_mm2s_arlock;
	wire	[3:0]	axi_mm2s_arcache;
	wire	[2:0]	axi_mm2s_arprot;
	wire	[3:0]	axi_mm2s_arqos;
	//
	wire		axi_mm2s_rvalid;
	wire		axi_mm2s_rready;
	wire	[2:0]	axi_mm2s_rid;
	wire	[31:0]	axi_mm2s_rdata;

	wire		axi_mm2s_rlast;

	wire	[1:0]	axi_mm2s_rresp;
	// }}}

	// Bus axi has no SINGLE slaves
	//

	// Bus axi has no DOUBLE slaves
	//
	// AXI4 slave definitions for bus axi,
	// slave controlbus, with prefix axi_controlbus
	// {{{
	wire		axi_controlbus_awvalid;
	wire		axi_controlbus_awready;
	wire	[2:0]	axi_controlbus_awid;
	wire	[24:0]	axi_controlbus_awaddr;
	wire	[7:0]	axi_controlbus_awlen;
	wire	[2:0]	axi_controlbus_awsize;
	wire	[1:0]	axi_controlbus_awburst;
	wire		axi_controlbus_awlock;
	wire	[3:0]	axi_controlbus_awcache;
	wire	[2:0]	axi_controlbus_awprot;
	wire	[3:0]	axi_controlbus_awqos;
	//
	wire		axi_controlbus_wvalid;
	wire		axi_controlbus_wready;
	wire	[31:0]	axi_controlbus_wdata;

	wire	[3:0]	axi_controlbus_wstrb;

	wire		axi_controlbus_wlast;

	wire		axi_controlbus_bvalid;
	wire		axi_controlbus_bready;
	wire	[2:0]	axi_controlbus_bid;
	wire	[1:0]	axi_controlbus_bresp;
	wire		axi_controlbus_arvalid;
	wire		axi_controlbus_arready;
	wire	[2:0]	axi_controlbus_arid;
	wire	[24:0]	axi_controlbus_araddr;
	wire	[7:0]	axi_controlbus_arlen;
	wire	[2:0]	axi_controlbus_arsize;
	wire	[1:0]	axi_controlbus_arburst;
	wire		axi_controlbus_arlock;
	wire	[3:0]	axi_controlbus_arcache;
	wire	[2:0]	axi_controlbus_arprot;
	wire	[3:0]	axi_controlbus_arqos;
	//
	wire		axi_controlbus_rvalid;
	wire		axi_controlbus_rready;
	wire	[2:0]	axi_controlbus_rid;
	wire	[31:0]	axi_controlbus_rdata;

	wire		axi_controlbus_rlast;

	wire	[1:0]	axi_controlbus_rresp;
	// }}}
	// AXI4 slave definitions for bus axi,
	// slave axiram, with prefix axi_axiram
	// {{{
	wire		axi_axiram_awvalid;
	wire		axi_axiram_awready;
	wire	[2:0]	axi_axiram_awid;
	wire	[24:0]	axi_axiram_awaddr;
	wire	[7:0]	axi_axiram_awlen;
	wire	[2:0]	axi_axiram_awsize;
	wire	[1:0]	axi_axiram_awburst;
	wire		axi_axiram_awlock;
	wire	[3:0]	axi_axiram_awcache;
	wire	[2:0]	axi_axiram_awprot;
	wire	[3:0]	axi_axiram_awqos;
	//
	wire		axi_axiram_wvalid;
	wire		axi_axiram_wready;
	wire	[31:0]	axi_axiram_wdata;

	wire	[3:0]	axi_axiram_wstrb;

	wire		axi_axiram_wlast;

	wire		axi_axiram_bvalid;
	wire		axi_axiram_bready;
	wire	[2:0]	axi_axiram_bid;
	wire	[1:0]	axi_axiram_bresp;
	wire		axi_axiram_arvalid;
	wire		axi_axiram_arready;
	wire	[2:0]	axi_axiram_arid;
	wire	[24:0]	axi_axiram_araddr;
	wire	[7:0]	axi_axiram_arlen;
	wire	[2:0]	axi_axiram_arsize;
	wire	[1:0]	axi_axiram_arburst;
	wire		axi_axiram_arlock;
	wire	[3:0]	axi_axiram_arcache;
	wire	[2:0]	axi_axiram_arprot;
	wire	[3:0]	axi_axiram_arqos;
	//
	wire		axi_axiram_rvalid;
	wire		axi_axiram_rready;
	wire	[2:0]	axi_axiram_rid;
	wire	[31:0]	axi_axiram_rdata;

	wire		axi_axiram_rlast;

	wire	[1:0]	axi_axiram_rresp;
	// }}}
	// }}}
	// Bus axil
	// {{{
	//	// AXI-lite slave definitions for bus axil,
	// component controlbus, with prefix axil_controlbus
	//
	// Verilator lint_off UNUSED
	wire		axil_controlbus_awready, axil_controlbus_wready,
			axil_controlbus_arready;
	wire		axil_controlbus_bvalid, axil_controlbus_rvalid;
	wire	[1:0]	axil_controlbus_bresp, axil_controlbus_rresp;
	wire	[31:0]	axil_controlbus_rdata;

	wire		axil_controlbus_awvalid, axil_controlbus_wvalid,
			axil_controlbus_arvalid,
			axil_controlbus_bready, axil_controlbus_rready;
	wire	[7:0]	axil_controlbus_araddr, axil_controlbus_awaddr;
	wire	[2:0]	axil_controlbus_arprot, axil_controlbus_awprot;
	wire	[31:0]	axil_controlbus_wdata;
	wire	[3:0]	axil_controlbus_wstrb;

	// Verilator lint_on  UNUSED

	// Bus axil has no SINGLE slaves
	//
	//	// AXI-lite slave definitions for bus axil(DIO),
	// component streamsink, with prefix axil_streamsink
	//
	// Verilator lint_off UNUSED
	wire		axil_streamsink_awready, axil_streamsink_wready,
			axil_streamsink_arready;
	wire		axil_streamsink_bvalid, axil_streamsink_rvalid;
	wire	[1:0]	axil_streamsink_bresp, axil_streamsink_rresp;
	wire	[31:0]	axil_streamsink_rdata;

	wire		axil_streamsink_awvalid, axil_streamsink_wvalid,
			axil_streamsink_arvalid,
			axil_streamsink_bready, axil_streamsink_rready;
	wire	[7:0]	axil_streamsink_araddr, axil_streamsink_awaddr;
	wire	[2:0]	axil_streamsink_arprot, axil_streamsink_awprot;
	wire	[31:0]	axil_streamsink_wdata;
	wire	[3:0]	axil_streamsink_wstrb;

	// Verilator lint_on  UNUSED
	//	// AXI-lite slave definitions for bus axil(DIO),
	// component dma, with prefix axil_dma
	//
	// Verilator lint_off UNUSED
	wire		axil_dma_awready, axil_dma_wready,
			axil_dma_arready;
	wire		axil_dma_bvalid, axil_dma_rvalid;
	wire	[1:0]	axil_dma_bresp, axil_dma_rresp;
	wire	[31:0]	axil_dma_rdata;

	wire		axil_dma_awvalid, axil_dma_wvalid,
			axil_dma_arvalid,
			axil_dma_bready, axil_dma_rready;
	wire	[7:0]	axil_dma_araddr, axil_dma_awaddr;
	wire	[2:0]	axil_dma_arprot, axil_dma_awprot;
	wire	[31:0]	axil_dma_wdata;
	wire	[3:0]	axil_dma_wstrb;

	// Verilator lint_on  UNUSED
	//	// AXI-lite slave definitions for bus axil(DIO),
	// component mm2s, with prefix axil_mm2s
	//
	// Verilator lint_off UNUSED
	wire		axil_mm2s_awready, axil_mm2s_wready,
			axil_mm2s_arready;
	wire		axil_mm2s_bvalid, axil_mm2s_rvalid;
	wire	[1:0]	axil_mm2s_bresp, axil_mm2s_rresp;
	wire	[31:0]	axil_mm2s_rdata;

	wire		axil_mm2s_awvalid, axil_mm2s_wvalid,
			axil_mm2s_arvalid,
			axil_mm2s_bready, axil_mm2s_rready;
	wire	[7:0]	axil_mm2s_araddr, axil_mm2s_awaddr;
	wire	[2:0]	axil_mm2s_arprot, axil_mm2s_awprot;
	wire	[31:0]	axil_mm2s_wdata;
	wire	[3:0]	axil_mm2s_wstrb;

	// Verilator lint_on  UNUSED
	//	// AXI-lite slave definitions for bus axil(DIO),
	// component s2mm, with prefix axil_s2mm
	//
	// Verilator lint_off UNUSED
	wire		axil_s2mm_awready, axil_s2mm_wready,
			axil_s2mm_arready;
	wire		axil_s2mm_bvalid, axil_s2mm_rvalid;
	wire	[1:0]	axil_s2mm_bresp, axil_s2mm_rresp;
	wire	[31:0]	axil_s2mm_rdata;

	wire		axil_s2mm_awvalid, axil_s2mm_wvalid,
			axil_s2mm_arvalid,
			axil_s2mm_bready, axil_s2mm_rready;
	wire	[7:0]	axil_s2mm_araddr, axil_s2mm_awaddr;
	wire	[2:0]	axil_s2mm_arprot, axil_s2mm_awprot;
	wire	[31:0]	axil_s2mm_wdata;
	wire	[3:0]	axil_s2mm_wstrb;

	// Verilator lint_on  UNUSED
	//	// AXI-lite slave definitions for bus axil,
	// component uart, with prefix axil_uart
	//
	// Verilator lint_off UNUSED
	wire		axil_uart_awready, axil_uart_wready,
			axil_uart_arready;
	wire		axil_uart_bvalid, axil_uart_rvalid;
	wire	[1:0]	axil_uart_bresp, axil_uart_rresp;
	wire	[31:0]	axil_uart_rdata;

	wire		axil_uart_awvalid, axil_uart_wvalid,
			axil_uart_arvalid,
			axil_uart_bready, axil_uart_rready;
	wire	[7:0]	axil_uart_araddr, axil_uart_awaddr;
	wire	[2:0]	axil_uart_arprot, axil_uart_awprot;
	wire	[31:0]	axil_uart_wdata;
	wire	[3:0]	axil_uart_wstrb;

	// Verilator lint_on  UNUSED
	//	// AXI-lite slave definitions for bus axil,
	// component axilp, with prefix axil_axilp
	//
	// Verilator lint_off UNUSED
	wire		axil_axilp_awready, axil_axilp_wready,
			axil_axilp_arready;
	wire		axil_axilp_bvalid, axil_axilp_rvalid;
	wire	[1:0]	axil_axilp_bresp, axil_axilp_rresp;
	wire	[31:0]	axil_axilp_rdata;

	wire		axil_axilp_awvalid, axil_axilp_wvalid,
			axil_axilp_arvalid,
			axil_axilp_bready, axil_axilp_rready;
	wire	[7:0]	axil_axilp_araddr, axil_axilp_awaddr;
	wire	[2:0]	axil_axilp_arprot, axil_axilp_awprot;
	wire	[31:0]	axil_axilp_wdata;
	wire	[3:0]	axil_axilp_wstrb;

	// Verilator lint_on  UNUSED
	//	// AXI-lite slave definitions for bus axil,
	// component axil_dio, with prefix axil_dio
	//
	// Verilator lint_off UNUSED
	wire		axil_dio_awready, axil_dio_wready,
			axil_dio_arready;
	wire		axil_dio_bvalid, axil_dio_rvalid;
	wire	[1:0]	axil_dio_bresp, axil_dio_rresp;
	wire	[31:0]	axil_dio_rdata;

	wire		axil_dio_awvalid, axil_dio_wvalid,
			axil_dio_arvalid,
			axil_dio_bready, axil_dio_rready;
	wire	[7:0]	axil_dio_araddr, axil_dio_awaddr;
	wire	[2:0]	axil_dio_arprot, axil_dio_awprot;
	wire	[31:0]	axil_dio_wdata;
	wire	[3:0]	axil_dio_wstrb;

	// Verilator lint_on  UNUSED
	// }}}
	// }}}
	////////////////////////////////////////////////////////////////////////
	//
	// Peripheral address decoding, bus handling
	// {{{
	//
	// BUS-LOGIC for wbu
	//
	//
	// Bus wbu has only one master (wbu) and one slave (dbgaxil)
	// connected to it -- skipping the interconnect
	//
	assign	wbu_dbgaxil_awvalid = wbu_awvalid;
	assign	wbu_awready = wbu_dbgaxil_awready;
	assign	wbu_dbgaxil_awid    = wbu_awid;
	assign	wbu_dbgaxil_awaddr  = wbu_awaddr;
	assign	wbu_dbgaxil_awlen   = wbu_awlen;
	assign	wbu_dbgaxil_awsize  = wbu_awsize;
	assign	wbu_dbgaxil_awburst = wbu_awburst;
	assign	wbu_dbgaxil_awlock  = wbu_awlock;
	assign	wbu_dbgaxil_awcache = wbu_awcache;
	assign	wbu_dbgaxil_awprot  = wbu_awprot;
	assign	wbu_dbgaxil_awqos   = wbu_awqos;
	//
	assign	wbu_dbgaxil_wvalid  = wbu_wvalid;
	assign	wbu_wready  = wbu_dbgaxil_wready;
	assign	wbu_dbgaxil_wdata   = wbu_wdata;
	assign	wbu_dbgaxil_wstrb   = wbu_wstrb;
	assign	wbu_dbgaxil_wlast   = wbu_wlast;
	//
	assign	wbu_bvalid  = wbu_dbgaxil_bvalid;
	assign	wbu_dbgaxil_bready  = wbu_bready;
	assign	wbu_bid     = wbu_dbgaxil_bid;
	assign	wbu_bresp   = wbu_dbgaxil_bresp;
	//
	//
	assign	wbu_dbgaxil_arvalid = wbu_arvalid;
	assign	wbu_arready = wbu_dbgaxil_arready;
	assign	wbu_dbgaxil_arid    = wbu_arid;
	assign	wbu_dbgaxil_araddr  = wbu_araddr;
	assign	wbu_dbgaxil_arlen   = wbu_arlen;
	assign	wbu_dbgaxil_arsize  = wbu_arsize;
	assign	wbu_dbgaxil_arburst = wbu_arburst;
	assign	wbu_dbgaxil_arlock  = wbu_arlock;
	assign	wbu_dbgaxil_arcache = wbu_arcache;
	assign	wbu_dbgaxil_arprot  = wbu_arprot;
	assign	wbu_dbgaxil_arqos   = wbu_arqos;
	//
	assign	wbu_rvalid  = wbu_dbgaxil_rvalid;
	assign	wbu_dbgaxil_rready  = wbu_rready;
	assign	wbu_rid     = wbu_dbgaxil_rid;
	assign	wbu_rdata   = wbu_dbgaxil_rdata;
	assign	wbu_rlast   = wbu_dbgaxil_rlast;
	assign	wbu_rresp   = wbu_dbgaxil_rresp;

	//
	// BUS-LOGIC for dbgaxil
	//
	//
	// Bus dbgaxil has only one master (dbgaxil) and one slave (zip)
	// connected to it -- skipping the interconnect
	//
	assign	dbgaxil_zip_awvalid = dbgaxil_dbgaxil_awvalid;
	assign	dbgaxil_dbgaxil_awready = dbgaxil_zip_awready;
	assign	dbgaxil_zip_awaddr  = dbgaxil_dbgaxil_awaddr;
	assign	dbgaxil_zip_awprot  = dbgaxil_dbgaxil_awprot;
	//
	assign	dbgaxil_zip_wvalid = dbgaxil_dbgaxil_wvalid;
	assign	dbgaxil_dbgaxil_wready = dbgaxil_zip_wready;
	assign	dbgaxil_zip_wdata  = dbgaxil_dbgaxil_wdata;
	assign	dbgaxil_zip_wstrb  = dbgaxil_dbgaxil_wstrb;
	//
	assign	dbgaxil_dbgaxil_bvalid  = dbgaxil_zip_bvalid;
	assign	dbgaxil_zip_bready  = dbgaxil_dbgaxil_bready;
	assign	dbgaxil_dbgaxil_bresp   = dbgaxil_zip_bresp;
	//
	assign	dbgaxil_zip_arvalid = dbgaxil_dbgaxil_arvalid;
	assign	dbgaxil_dbgaxil_arready = dbgaxil_zip_arready;
	assign	dbgaxil_zip_araddr  = dbgaxil_dbgaxil_araddr;
	assign	dbgaxil_zip_arprot  = dbgaxil_dbgaxil_arprot;
	//
	assign	dbgaxil_dbgaxil_rvalid  = dbgaxil_zip_rvalid;
	assign	dbgaxil_zip_rready  = dbgaxil_dbgaxil_rready;
	assign	dbgaxil_dbgaxil_rdata   = dbgaxil_zip_rdata;
	assign	dbgaxil_dbgaxil_rresp   = dbgaxil_zip_rresp;

	//
	// BUS-LOGIC for axi
	//
	//
	// No class SINGLE peripherals on the "axi" bus
	//

	//
	// No class DOUBLE peripherals on the "axi" bus
	//

	////////////////////////////////////////////////////////////////////////
	//
	// Connect the axi bus components together using the axixbar()
	// {{{
	//
	axixbar #(
		// {{{
		.C_AXI_ADDR_WIDTH(25),
		.C_AXI_DATA_WIDTH(32),
		.C_AXI_ID_WIDTH(3),
		.NM(6), .NS(2),
		.SLAVE_ADDR({
			// Address width    = 25
			// Address LSBs     = 0
			// Slave name width = 10
			{ 25'h1000000 }, //     axiram: 0x1000000
			{ 25'h0000000 }  // controlbus: 0x0000000
		}),
		.SLAVE_MASK({
			// Address width    = 25
			// Address LSBs     = 0
			// Slave name width = 10
			{ 25'h1000000 }, //     axiram
			{ 25'h1000000 }  // controlbus
		}),
		.OPT_LOWPOWER(1'b1)
		// }}}
	) axi_xbar(
		// {{{
		.S_AXI_ACLK(i_clk),
		.S_AXI_ARESETN(!i_reset),
		// Master ports
		// {{{
		.S_AXI_AWVALID({
			axi_mm2s_awvalid,
			axi_vibus_awvalid,
			axi_cpudata_awvalid,
			axi_dma_awvalid,
			axi_s2mm_awvalid,
			axi_zip_awvalid
		}),
		.S_AXI_AWREADY({
			axi_mm2s_awready,
			axi_vibus_awready,
			axi_cpudata_awready,
			axi_dma_awready,
			axi_s2mm_awready,
			axi_zip_awready
		}),
		.S_AXI_AWID({
			axi_mm2s_awid,
			axi_vibus_awid,
			axi_cpudata_awid,
			axi_dma_awid,
			axi_s2mm_awid,
			axi_zip_awid
		}),
		.S_AXI_AWADDR({
			axi_mm2s_awaddr,
			axi_vibus_awaddr,
			axi_cpudata_awaddr,
			axi_dma_awaddr,
			axi_s2mm_awaddr,
			axi_zip_awaddr
		}),
		.S_AXI_AWLEN({
			axi_mm2s_awlen,
			axi_vibus_awlen,
			axi_cpudata_awlen,
			axi_dma_awlen,
			axi_s2mm_awlen,
			axi_zip_awlen
		}),
		.S_AXI_AWSIZE({
			axi_mm2s_awsize,
			axi_vibus_awsize,
			axi_cpudata_awsize,
			axi_dma_awsize,
			axi_s2mm_awsize,
			axi_zip_awsize
		}),
		.S_AXI_AWBURST({
			axi_mm2s_awburst,
			axi_vibus_awburst,
			axi_cpudata_awburst,
			axi_dma_awburst,
			axi_s2mm_awburst,
			axi_zip_awburst
		}),
		.S_AXI_AWLOCK({
			axi_mm2s_awlock,
			axi_vibus_awlock,
			axi_cpudata_awlock,
			axi_dma_awlock,
			axi_s2mm_awlock,
			axi_zip_awlock
		}),
		.S_AXI_AWCACHE({
			axi_mm2s_awcache,
			axi_vibus_awcache,
			axi_cpudata_awcache,
			axi_dma_awcache,
			axi_s2mm_awcache,
			axi_zip_awcache
		}),
		.S_AXI_AWPROT({
			axi_mm2s_awprot,
			axi_vibus_awprot,
			axi_cpudata_awprot,
			axi_dma_awprot,
			axi_s2mm_awprot,
			axi_zip_awprot
		}),
		.S_AXI_AWQOS({
			axi_mm2s_awqos,
			axi_vibus_awqos,
			axi_cpudata_awqos,
			axi_dma_awqos,
			axi_s2mm_awqos,
			axi_zip_awqos
		}),
		//
		.S_AXI_WVALID({
			axi_mm2s_wvalid,
			axi_vibus_wvalid,
			axi_cpudata_wvalid,
			axi_dma_wvalid,
			axi_s2mm_wvalid,
			axi_zip_wvalid
		}),
		.S_AXI_WREADY({
			axi_mm2s_wready,
			axi_vibus_wready,
			axi_cpudata_wready,
			axi_dma_wready,
			axi_s2mm_wready,
			axi_zip_wready
		}),
		.S_AXI_WDATA({
			axi_mm2s_wdata,
			axi_vibus_wdata,
			axi_cpudata_wdata,
			axi_dma_wdata,
			axi_s2mm_wdata,
			axi_zip_wdata
		}),
		.S_AXI_WSTRB({
			axi_mm2s_wstrb,
			axi_vibus_wstrb,
			axi_cpudata_wstrb,
			axi_dma_wstrb,
			axi_s2mm_wstrb,
			axi_zip_wstrb
		}),
		.S_AXI_WLAST({
			axi_mm2s_wlast,
			axi_vibus_wlast,
			axi_cpudata_wlast,
			axi_dma_wlast,
			axi_s2mm_wlast,
			axi_zip_wlast
		}),
		//
		.S_AXI_BVALID({
			axi_mm2s_bvalid,
			axi_vibus_bvalid,
			axi_cpudata_bvalid,
			axi_dma_bvalid,
			axi_s2mm_bvalid,
			axi_zip_bvalid
		}),
		.S_AXI_BREADY({
			axi_mm2s_bready,
			axi_vibus_bready,
			axi_cpudata_bready,
			axi_dma_bready,
			axi_s2mm_bready,
			axi_zip_bready
		}),
		.S_AXI_BID({
			axi_mm2s_bid,
			axi_vibus_bid,
			axi_cpudata_bid,
			axi_dma_bid,
			axi_s2mm_bid,
			axi_zip_bid
		}),
		.S_AXI_BRESP({
			axi_mm2s_bresp,
			axi_vibus_bresp,
			axi_cpudata_bresp,
			axi_dma_bresp,
			axi_s2mm_bresp,
			axi_zip_bresp
		}),
		//
		// Read connections
		.S_AXI_ARVALID({
			axi_mm2s_arvalid,
			axi_vibus_arvalid,
			axi_cpudata_arvalid,
			axi_dma_arvalid,
			axi_s2mm_arvalid,
			axi_zip_arvalid
		}),
		.S_AXI_ARREADY({
			axi_mm2s_arready,
			axi_vibus_arready,
			axi_cpudata_arready,
			axi_dma_arready,
			axi_s2mm_arready,
			axi_zip_arready
		}),
		.S_AXI_ARID({
			axi_mm2s_arid,
			axi_vibus_arid,
			axi_cpudata_arid,
			axi_dma_arid,
			axi_s2mm_arid,
			axi_zip_arid
		}),
		.S_AXI_ARADDR({
			axi_mm2s_araddr,
			axi_vibus_araddr,
			axi_cpudata_araddr,
			axi_dma_araddr,
			axi_s2mm_araddr,
			axi_zip_araddr
		}),
		.S_AXI_ARLEN({
			axi_mm2s_arlen,
			axi_vibus_arlen,
			axi_cpudata_arlen,
			axi_dma_arlen,
			axi_s2mm_arlen,
			axi_zip_arlen
		}),
		.S_AXI_ARSIZE({
			axi_mm2s_arsize,
			axi_vibus_arsize,
			axi_cpudata_arsize,
			axi_dma_arsize,
			axi_s2mm_arsize,
			axi_zip_arsize
		}),
		.S_AXI_ARBURST({
			axi_mm2s_arburst,
			axi_vibus_arburst,
			axi_cpudata_arburst,
			axi_dma_arburst,
			axi_s2mm_arburst,
			axi_zip_arburst
		}),
		.S_AXI_ARLOCK({
			axi_mm2s_arlock,
			axi_vibus_arlock,
			axi_cpudata_arlock,
			axi_dma_arlock,
			axi_s2mm_arlock,
			axi_zip_arlock
		}),
		.S_AXI_ARCACHE({
			axi_mm2s_arcache,
			axi_vibus_arcache,
			axi_cpudata_arcache,
			axi_dma_arcache,
			axi_s2mm_arcache,
			axi_zip_arcache
		}),
		.S_AXI_ARPROT({
			axi_mm2s_arprot,
			axi_vibus_arprot,
			axi_cpudata_arprot,
			axi_dma_arprot,
			axi_s2mm_arprot,
			axi_zip_arprot
		}),
		.S_AXI_ARQOS({
			axi_mm2s_arqos,
			axi_vibus_arqos,
			axi_cpudata_arqos,
			axi_dma_arqos,
			axi_s2mm_arqos,
			axi_zip_arqos
		}),
		//
		.S_AXI_RVALID({
			axi_mm2s_rvalid,
			axi_vibus_rvalid,
			axi_cpudata_rvalid,
			axi_dma_rvalid,
			axi_s2mm_rvalid,
			axi_zip_rvalid
		}),
		.S_AXI_RREADY({
			axi_mm2s_rready,
			axi_vibus_rready,
			axi_cpudata_rready,
			axi_dma_rready,
			axi_s2mm_rready,
			axi_zip_rready
		}),
		.S_AXI_RID({
			axi_mm2s_rid,
			axi_vibus_rid,
			axi_cpudata_rid,
			axi_dma_rid,
			axi_s2mm_rid,
			axi_zip_rid
		}),
		.S_AXI_RDATA({
			axi_mm2s_rdata,
			axi_vibus_rdata,
			axi_cpudata_rdata,
			axi_dma_rdata,
			axi_s2mm_rdata,
			axi_zip_rdata
		}),
		.S_AXI_RLAST({
			axi_mm2s_rlast,
			axi_vibus_rlast,
			axi_cpudata_rlast,
			axi_dma_rlast,
			axi_s2mm_rlast,
			axi_zip_rlast
		}),
		.S_AXI_RRESP({
			axi_mm2s_rresp,
			axi_vibus_rresp,
			axi_cpudata_rresp,
			axi_dma_rresp,
			axi_s2mm_rresp,
			axi_zip_rresp
		}),
		// }}}
		// Connections to slaves
		// {{{
		.M_AXI_AWVALID({
			axi_axiram_awvalid,
			axi_controlbus_awvalid
		}),
		.M_AXI_AWREADY({
			axi_axiram_awready,
			axi_controlbus_awready
		}),
		.M_AXI_AWID({
			axi_axiram_awid,
			axi_controlbus_awid
		}),
		.M_AXI_AWADDR({
			axi_axiram_awaddr,
			axi_controlbus_awaddr
		}),
		.M_AXI_AWLEN({
			axi_axiram_awlen,
			axi_controlbus_awlen
		}),
		.M_AXI_AWSIZE({
			axi_axiram_awsize,
			axi_controlbus_awsize
		}),
		.M_AXI_AWBURST({
			axi_axiram_awburst,
			axi_controlbus_awburst
		}),
		.M_AXI_AWLOCK({
			axi_axiram_awlock,
			axi_controlbus_awlock
		}),
		.M_AXI_AWCACHE({
			axi_axiram_awcache,
			axi_controlbus_awcache
		}),
		.M_AXI_AWPROT({
			axi_axiram_awprot,
			axi_controlbus_awprot
		}),
		.M_AXI_AWQOS({
			axi_axiram_awqos,
			axi_controlbus_awqos
		}),
		//
		.M_AXI_WVALID({
			axi_axiram_wvalid,
			axi_controlbus_wvalid
		}),
		.M_AXI_WREADY({
			axi_axiram_wready,
			axi_controlbus_wready
		}),
		.M_AXI_WDATA({
			axi_axiram_wdata,
			axi_controlbus_wdata
		}),
		.M_AXI_WSTRB({
			axi_axiram_wstrb,
			axi_controlbus_wstrb
		}),
		.M_AXI_WLAST({
			axi_axiram_wlast,
			axi_controlbus_wlast
		}),
		//
		.M_AXI_BVALID({
			axi_axiram_bvalid,
			axi_controlbus_bvalid
		}),
		.M_AXI_BREADY({
			axi_axiram_bready,
			axi_controlbus_bready
		}),
		.M_AXI_BID({
			axi_axiram_bid,
			axi_controlbus_bid
		}),
		.M_AXI_BRESP({
			axi_axiram_bresp,
			axi_controlbus_bresp
		}),
		//
		// Read connections
		.M_AXI_ARVALID({
			axi_axiram_arvalid,
			axi_controlbus_arvalid
		}),
		.M_AXI_ARREADY({
			axi_axiram_arready,
			axi_controlbus_arready
		}),
		.M_AXI_ARID({
			axi_axiram_arid,
			axi_controlbus_arid
		}),
		.M_AXI_ARADDR({
			axi_axiram_araddr,
			axi_controlbus_araddr
		}),
		.M_AXI_ARLEN({
			axi_axiram_arlen,
			axi_controlbus_arlen
		}),
		.M_AXI_ARSIZE({
			axi_axiram_arsize,
			axi_controlbus_arsize
		}),
		.M_AXI_ARBURST({
			axi_axiram_arburst,
			axi_controlbus_arburst
		}),
		.M_AXI_ARLOCK({
			axi_axiram_arlock,
			axi_controlbus_arlock
		}),
		.M_AXI_ARCACHE({
			axi_axiram_arcache,
			axi_controlbus_arcache
		}),
		.M_AXI_ARPROT({
			axi_axiram_arprot,
			axi_controlbus_arprot
		}),
		.M_AXI_ARQOS({
			axi_axiram_arqos,
			axi_controlbus_arqos
		}),
		//
		.M_AXI_RVALID({
			axi_axiram_rvalid,
			axi_controlbus_rvalid
		}),
		.M_AXI_RREADY({
			axi_axiram_rready,
			axi_controlbus_rready
		}),
		.M_AXI_RID({
			axi_axiram_rid,
			axi_controlbus_rid
		}),
		.M_AXI_RDATA({
			axi_axiram_rdata,
			axi_controlbus_rdata
		}),
		.M_AXI_RLAST({
			axi_axiram_rlast,
			axi_controlbus_rlast
		}),
		.M_AXI_RRESP({
			axi_axiram_rresp,
			axi_controlbus_rresp
		})
		// }}}
		// }}}
	);

		// }}}
	//
	// BUS-LOGIC for axil
	//
	//
	// No class SINGLE peripherals on the "axil" bus
	//

	//
	// Connect the axil bus components together using the axilxbar()
	//
	//
	axilxbar #(
		.C_AXI_ADDR_WIDTH(8),
		.C_AXI_DATA_WIDTH(32),
		.NM(1), .NS(3),
		.SLAVE_ADDR({
			// Address width    = 8
			// Address LSBs     = 0
			// Slave name width = 8
			{ 8'h80 }, // axil_dio: 0x80
			{ 8'h40 }, //    axilp: 0x40
			{ 8'h00 }  //     uart: 0x00
		}),
		.SLAVE_MASK({
			// Address width    = 8
			// Address LSBs     = 0
			// Slave name width = 8
			{ 8'h80 }, // axil_dio
			{ 8'hc0 }, //    axilp
			{ 8'hc0 }  //     uart
		}),
		.OPT_LOWPOWER(1'b1)
	) axil_xbar(
		.S_AXI_ACLK(i_clk),
		.S_AXI_ARESETN(!i_reset),
		//
		.S_AXI_AWVALID({
			axil_controlbus_awvalid
		}),
		.S_AXI_AWREADY({
			axil_controlbus_awready
		}),
		.S_AXI_AWPROT({
			axil_controlbus_awprot
		}),
		.S_AXI_AWADDR({
			axil_controlbus_awaddr
		}),
		//
		.S_AXI_WVALID({
			axil_controlbus_wvalid
		}),
		.S_AXI_WREADY({
			axil_controlbus_wready
		}),
		.S_AXI_WDATA({
			axil_controlbus_wdata
		}),
		.S_AXI_WSTRB({
			axil_controlbus_wstrb
		}),
		//
		.S_AXI_BVALID({
			axil_controlbus_bvalid
		}),
		.S_AXI_BREADY({
			axil_controlbus_bready
		}),
		.S_AXI_BRESP({
			axil_controlbus_bresp
		}),
		// Read connections
		.S_AXI_ARVALID({
			axil_controlbus_arvalid
		}),
		.S_AXI_ARREADY({
			axil_controlbus_arready
		}),
		.S_AXI_ARPROT({
			axil_controlbus_arprot
		}),
		.S_AXI_ARADDR({
			axil_controlbus_araddr
		}),
		//
		.S_AXI_RVALID({
			axil_controlbus_rvalid
		}),
		.S_AXI_RREADY({
			axil_controlbus_rready
		}),
		.S_AXI_RDATA({
			axil_controlbus_rdata
		}),
		.S_AXI_RRESP({
			axil_controlbus_rresp
		}),
		//
		// Connections to slaves
		//
		.M_AXI_AWVALID({
			axil_dio_awvalid,
			axil_axilp_awvalid,
			axil_uart_awvalid
		}),
		.M_AXI_AWREADY({
			axil_dio_awready,
			axil_axilp_awready,
			axil_uart_awready
		}),
		.M_AXI_AWPROT({
			axil_dio_awprot,
			axil_axilp_awprot,
			axil_uart_awprot
		}),
		.M_AXI_AWADDR({
			axil_dio_awaddr,
			axil_axilp_awaddr,
			axil_uart_awaddr
		}),
		//
		.M_AXI_WVALID({
			axil_dio_wvalid,
			axil_axilp_wvalid,
			axil_uart_wvalid
		}),
		.M_AXI_WREADY({
			axil_dio_wready,
			axil_axilp_wready,
			axil_uart_wready
		}),
		.M_AXI_WDATA({
			axil_dio_wdata,
			axil_axilp_wdata,
			axil_uart_wdata
		}),
		.M_AXI_WSTRB({
			axil_dio_wstrb,
			axil_axilp_wstrb,
			axil_uart_wstrb
		}),
		//
		.M_AXI_BVALID({
			axil_dio_bvalid,
			axil_axilp_bvalid,
			axil_uart_bvalid
		}),
		.M_AXI_BREADY({
			axil_dio_bready,
			axil_axilp_bready,
			axil_uart_bready
		}),
		.M_AXI_BRESP({
			axil_dio_bresp,
			axil_axilp_bresp,
			axil_uart_bresp
		}),
		// Read connections
		.M_AXI_ARVALID({
			axil_dio_arvalid,
			axil_axilp_arvalid,
			axil_uart_arvalid
		}),
		.M_AXI_ARREADY({
			axil_dio_arready,
			axil_axilp_arready,
			axil_uart_arready
		}),
		.M_AXI_ARPROT({
			axil_dio_arprot,
			axil_axilp_arprot,
			axil_uart_arprot
		}),
		.M_AXI_ARADDR({
			axil_dio_araddr,
			axil_axilp_araddr,
			axil_uart_araddr
		}),
		//
		.M_AXI_RVALID({
			axil_dio_rvalid,
			axil_axilp_rvalid,
			axil_uart_rvalid
		}),
		.M_AXI_RREADY({
			axil_dio_rready,
			axil_axilp_rready,
			axil_uart_rready
		}),
		.M_AXI_RDATA({
			axil_dio_rdata,
			axil_axilp_rdata,
			axil_uart_rdata
		}),
		.M_AXI_RRESP({
			axil_dio_rresp,
			axil_axilp_rresp,
			axil_uart_rresp
		})
		);

	// }}}
	////////////////////////////////////////////////////////////////////////
	//
	// Declare the interrupt busses
	// {{{
	// Interrupt busses are defined by anything with a @PIC tag.
	// The @PIC.BUS tag defines the name of the wire bus below,
	// while the @PIC.MAX tag determines the size of the bus width.
	//
	// For your peripheral to be assigned to this bus, it must have an
	// @INT.NAME.WIRE= tag to define the wire name of the interrupt line,
	// and an @INT.NAME.PIC= tag matching the @PIC.BUS tag of the bus
	// your interrupt will be assigned to.  If an @INT.NAME.ID tag also
	// exists, then your interrupt will be assigned to the position given
	// by the ID# in that tag.
	//
	assign	sys_int_vector = {
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		uarttxf_int,
		uartrxf_int,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0
	};
	assign	alt_int_vector = {
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		uartrx_int,
		uarttx_int,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0
	};
	// }}}
	////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////
	//
	// @MAIN.INSERT and @MAIN.ALT
	// {{{
	////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////
	//
	//
	// Now we turn to defining all of the parts and pieces of what
	// each of the various peripherals does, and what logic it needs.
	//
	// This information comes from the @MAIN.INSERT and @MAIN.ALT tags.
	// If an @ACCESS tag is available, an ifdef is created to handle
	// having the access and not.  If the @ACCESS tag is `defined above
	// then the @MAIN.INSERT code is executed.  If not, the @MAIN.ALT
	// code is exeucted, together with any other cleanup settings that
	// might need to take place--such as returning zeros to the bus,
	// or making sure all of the various interrupt wires are set to
	// zero if the component is not included.
	//
`ifdef	WBUBUS_MASTER
	// {{{
	// Debug bus / console serial port modules
	// {{{
	// The Host USB interface, to be used by the WB-UART bus
	rxuartlite #(
		// {{{
		.TIMER_BITS(DBGBUSBITS),
		.CLOCKS_PER_BAUD(BUSUART[DBGBUSBITS-1:0])
		// }}}
	) rcv(
		// {{{
		i_clk, i_wbu_uart_rx,
		wbu_rx_stb, wbu_rx_data
		// }}}
	);

	txuartlite #(
		// {{{
		.TIMING_BITS(DBGBUSBITS[4:0]),
				.CLOCKS_PER_BAUD(BUSUART[DBGBUSBITS-1:0])
		// }}}
	) txv(
		// {{{
		i_clk,
		wbu_tx_stb,
		wbu_tx_data,
		o_wbu_uart_tx,
		wbu_tx_busy
		// }}}
	);
	// }}}
`ifndef	BUSPIC_ACCESS
	wire	w_bus_int;
	assign	w_bus_int = 1'b0;
`endif
	axiuartbus #(
		// {{{
		.C_AXI_ID_WIDTH(2),
		.C_AXI_ADDR_WIDTH(9),
		.C_AXI_DATA_WIDTH(32)
		// }}}
	) genbus(
		// {{{
		i_clk, !i_reset,
		wbu_rx_stb, wbu_rx_data,
		//
		wbu_awvalid,
		wbu_awready,
		wbu_awid,
		wbu_awaddr[9-1:0],
		wbu_awlen,
		wbu_awsize,
		wbu_awburst,
		wbu_awlock,
		wbu_awcache,
		wbu_awprot,
		wbu_awqos,
//
		wbu_wvalid,
		wbu_wready,
		wbu_wdata,
		wbu_wstrb,
		wbu_wlast,
//
		wbu_bvalid,
		wbu_bready,
		wbu_bid,
		wbu_bresp,
// Read connections
		wbu_arvalid,
		wbu_arready,
		wbu_arid,
		wbu_araddr[9-1:0],
		wbu_arlen,
		wbu_arsize,
		wbu_arburst,
		wbu_arlock,
		wbu_arcache,
		wbu_arprot,
		wbu_arqos,
//
		wbu_rvalid,
		wbu_rready,
		wbu_rid,
		wbu_rdata,
		wbu_rlast,
		wbu_rresp,
		w_bus_int,
		wbu_tx_stb, wbu_tx_data, wbu_tx_busy,
		//
		w_console_tx_stb, w_console_tx_data, w_console_busy,
		w_console_rx_stb, w_console_rx_data
		// }}}
	);

	// }}}
`else	// WBUBUS_MASTER
	// {{{
	// Null bus master
	// {{{
	// }}}
	// }}}
`endif	// WBUBUS_MASTER

`ifdef	INCLUDE_ZIPCPU
	// {{{
	//
	//
	// The ZipCPU/ZipSystem BUS master
	//
	//
	assign	zip_int_vector = { alt_int_vector[14:8], sys_int_vector[14:6] };
	zipaxi #(
		// {{{
		.RESET_ADDRESS(RESET_ADDRESS),
		.ADDRESS_WIDTH(ZIP_ADDRESS_WIDTH),
		.LGICACHE(12),.OPT_LGDCACHE(12),
		.START_HALTED(ZIP_START_HALTED),
		.RESET_DURATION(20)
		// }}}
	) swic(
		// {{{
		.S_AXI_ACLK(i_clk), .S_AXI_ARESETN(!i_reset),
			.i_cpu_reset(!i_reset),
			.i_interrupt(cpu_interrupt),
		// Debug interface
		// {{{
		//
		.S_DBG_AWVALID(dbgaxil_zip_awvalid),
		.S_DBG_AWREADY(dbgaxil_zip_awready),
		.S_DBG_AWADDR( dbgaxil_zip_awaddr[9-1:0]),
		.S_DBG_AWPROT( dbgaxil_zip_awprot),
//
		.S_DBG_WVALID(dbgaxil_zip_wvalid),
		.S_DBG_WREADY(dbgaxil_zip_wready),
		.S_DBG_WDATA( dbgaxil_zip_wdata),
		.S_DBG_WSTRB( dbgaxil_zip_wstrb),
//
		.S_DBG_BVALID(dbgaxil_zip_bvalid),
		.S_DBG_BREADY(dbgaxil_zip_bready),
		.S_DBG_BRESP( dbgaxil_zip_bresp),
		// Read connections
		.S_DBG_ARVALID(dbgaxil_zip_arvalid),
		.S_DBG_ARREADY(dbgaxil_zip_arready),
		.S_DBG_ARADDR( dbgaxil_zip_araddr[9-1:0]),
		.S_DBG_ARPROT( dbgaxil_zip_arprot),
//
		.S_DBG_RVALID(dbgaxil_zip_rvalid),
		.S_DBG_RREADY(dbgaxil_zip_rready),
		.S_DBG_RDATA( dbgaxil_zip_rdata),
		.S_DBG_RRESP( dbgaxil_zip_rresp),
		// }}}
		// Instruction interface
		// {{{
		//
		.M_INSN_AWVALID(axi_zip_awvalid),
		.M_INSN_AWREADY(axi_zip_awready),
		.M_INSN_AWID(   axi_zip_awid),
		.M_INSN_AWADDR( axi_zip_awaddr[25-1:0]),
		.M_INSN_AWLEN(  axi_zip_awlen),
		.M_INSN_AWSIZE( axi_zip_awsize),
		.M_INSN_AWBURST(axi_zip_awburst),
		.M_INSN_AWLOCK( axi_zip_awlock),
		.M_INSN_AWCACHE(axi_zip_awcache),
		.M_INSN_AWPROT( axi_zip_awprot),
		.M_INSN_AWQOS(  axi_zip_awqos),
//
		.M_INSN_WVALID(axi_zip_wvalid),
		.M_INSN_WREADY(axi_zip_wready),
		.M_INSN_WDATA( axi_zip_wdata),
		.M_INSN_WSTRB( axi_zip_wstrb),
		.M_INSN_WLAST( axi_zip_wlast),
//
		.M_INSN_BVALID(axi_zip_bvalid),
		.M_INSN_BREADY(axi_zip_bready),
		.M_INSN_BID(   axi_zip_bid),
		.M_INSN_BRESP( axi_zip_bresp),
		// Read connections
		.M_INSN_ARVALID(axi_zip_arvalid),
		.M_INSN_ARREADY(axi_zip_arready),
		.M_INSN_ARID(   axi_zip_arid),
		.M_INSN_ARADDR( axi_zip_araddr[25-1:0]),
		.M_INSN_ARLEN(  axi_zip_arlen),
		.M_INSN_ARSIZE( axi_zip_arsize),
		.M_INSN_ARBURST(axi_zip_arburst),
		.M_INSN_ARLOCK( axi_zip_arlock),
		.M_INSN_ARCACHE(axi_zip_arcache),
		.M_INSN_ARPROT( axi_zip_arprot),
		.M_INSN_ARQOS(  axi_zip_arqos),
//
		.M_INSN_RVALID(axi_zip_rvalid),
		.M_INSN_RREADY(axi_zip_rready),
		.M_INSN_RID(   axi_zip_rid),
		.M_INSN_RDATA( axi_zip_rdata),
		.M_INSN_RLAST( axi_zip_rlast),
		.M_INSN_RRESP( axi_zip_rresp),
		// }}}
		// Data interface
		// {{{
		//
		.M_DATA_AWVALID(axi_cpudata_awvalid),
		.M_DATA_AWREADY(axi_cpudata_awready),
		.M_DATA_AWID(   axi_cpudata_awid),
		.M_DATA_AWADDR( axi_cpudata_awaddr[25-1:0]),
		.M_DATA_AWLEN(  axi_cpudata_awlen),
		.M_DATA_AWSIZE( axi_cpudata_awsize),
		.M_DATA_AWBURST(axi_cpudata_awburst),
		.M_DATA_AWLOCK( axi_cpudata_awlock),
		.M_DATA_AWCACHE(axi_cpudata_awcache),
		.M_DATA_AWPROT( axi_cpudata_awprot),
		.M_DATA_AWQOS(  axi_cpudata_awqos),
//
		.M_DATA_WVALID(axi_cpudata_wvalid),
		.M_DATA_WREADY(axi_cpudata_wready),
		.M_DATA_WDATA( axi_cpudata_wdata),
		.M_DATA_WSTRB( axi_cpudata_wstrb),
		.M_DATA_WLAST( axi_cpudata_wlast),
//
		.M_DATA_BVALID(axi_cpudata_bvalid),
		.M_DATA_BREADY(axi_cpudata_bready),
		.M_DATA_BID(   axi_cpudata_bid),
		.M_DATA_BRESP( axi_cpudata_bresp),
		// Read connections
		.M_DATA_ARVALID(axi_cpudata_arvalid),
		.M_DATA_ARREADY(axi_cpudata_arready),
		.M_DATA_ARID(   axi_cpudata_arid),
		.M_DATA_ARADDR( axi_cpudata_araddr[25-1:0]),
		.M_DATA_ARLEN(  axi_cpudata_arlen),
		.M_DATA_ARSIZE( axi_cpudata_arsize),
		.M_DATA_ARBURST(axi_cpudata_arburst),
		.M_DATA_ARLOCK( axi_cpudata_arlock),
		.M_DATA_ARCACHE(axi_cpudata_arcache),
		.M_DATA_ARPROT( axi_cpudata_arprot),
		.M_DATA_ARQOS(  axi_cpudata_arqos),
//
		.M_DATA_RVALID(axi_cpudata_rvalid),
		.M_DATA_RREADY(axi_cpudata_rready),
		.M_DATA_RID(   axi_cpudata_rid),
		.M_DATA_RDATA( axi_cpudata_rdata),
		.M_DATA_RLAST( axi_cpudata_rlast),
		.M_DATA_RRESP( axi_cpudata_rresp),
		// }}}
		.o_cmd_reset(axilp_cmd_reset),
		.o_halted(axilp_cpu_halted),
		.o_gie(axilp_gie),
		.o_op_stall(axilp_opstall),
		.o_pf_stall(axilp_pfstall),
		.o_i_count(axilp_icount),
		.o_debug(zip_debug)
		// }}}
	);
	assign	zip_trigger = zip_debug[31];
	// }}}
`else	// INCLUDE_ZIPCPU
	// {{{
	// Null bus master
	// {{{
	// }}}
	// Null bus slave
	// {{{
	// }}}
	// Null interrupt definitions
	// {{{
	assign	zip_cpu_int = 1'b0;	// zip.INT.ZIP.WIRE
	// }}}
	// }}}
`endif	// INCLUDE_ZIPCPU

	axis2mm #(
		.C_AXI_ADDR_WIDTH(25),
		.C_AXI_DATA_WIDTH(32),
		.C_AXI_ID_WIDTH(3),
		.AXI_ID(3'b001)
	) s2mmi (
		.S_AXI_ACLK(i_clk),
		.S_AXI_ARESETN(!i_reset),
		//
		.S_AXIS_TVALID(streamsrc_tvalid),
		.S_AXIS_TREADY(streamsrc_tready),
		.S_AXIS_TDATA( streamsrc_tdata),
		.S_AXIS_TLAST( streamsrc_tlast),
		.S_AXIS_TUSER(1'b0),	// TUSER
		//
		//
		.S_AXIL_AWVALID(axil_s2mm_awvalid),
		.S_AXIL_AWREADY(axil_s2mm_awready),
		.S_AXIL_AWADDR( axil_s2mm_awaddr[5-1:0]),
		.S_AXIL_AWPROT( axil_s2mm_awprot),
//
		.S_AXIL_WVALID(axil_s2mm_wvalid),
		.S_AXIL_WREADY(axil_s2mm_wready),
		.S_AXIL_WDATA( axil_s2mm_wdata),
		.S_AXIL_WSTRB( axil_s2mm_wstrb),
//
		.S_AXIL_BVALID(axil_s2mm_bvalid),
		.S_AXIL_BREADY(axil_s2mm_bready),
		.S_AXIL_BRESP( axil_s2mm_bresp),
		// Read connections
		.S_AXIL_ARVALID(axil_s2mm_arvalid),
		.S_AXIL_ARREADY(axil_s2mm_arready),
		.S_AXIL_ARADDR( axil_s2mm_araddr[5-1:0]),
		.S_AXIL_ARPROT( axil_s2mm_arprot),
//
		.S_AXIL_RVALID(axil_s2mm_rvalid),
		.S_AXIL_RREADY(axil_s2mm_rready),
		.S_AXIL_RDATA( axil_s2mm_rdata),
		.S_AXIL_RRESP( axil_s2mm_rresp),
		//
		.M_AXI_AWVALID(axi_s2mm_awvalid),
		.M_AXI_AWREADY(axi_s2mm_awready),
		.M_AXI_AWID(   axi_s2mm_awid),
		.M_AXI_AWADDR( axi_s2mm_awaddr[25-1:0]),
		.M_AXI_AWLEN(  axi_s2mm_awlen),
		.M_AXI_AWSIZE( axi_s2mm_awsize),
		.M_AXI_AWBURST(axi_s2mm_awburst),
		.M_AXI_AWLOCK( axi_s2mm_awlock),
		.M_AXI_AWCACHE(axi_s2mm_awcache),
		.M_AXI_AWPROT( axi_s2mm_awprot),
		.M_AXI_AWQOS(  axi_s2mm_awqos),
//
		.M_AXI_WVALID(axi_s2mm_wvalid),
		.M_AXI_WREADY(axi_s2mm_wready),
		.M_AXI_WDATA( axi_s2mm_wdata),
		.M_AXI_WSTRB( axi_s2mm_wstrb),
		.M_AXI_WLAST( axi_s2mm_wlast),
//
		.M_AXI_BVALID(axi_s2mm_bvalid),
		.M_AXI_BREADY(axi_s2mm_bready),
		.M_AXI_BID(   axi_s2mm_bid),
		.M_AXI_BRESP( axi_s2mm_bresp),
		.M_AXI_WUSER(axi_s2mm_wuser),
		.o_int(s2mm_int)
	);

	assign	axi_s2mm_arvalid = 0;
	assign	axi_s2mm_arid    = 0;
	assign	axi_s2mm_araddr  = 0;
	assign	axi_s2mm_arlen   = 0;
	assign	axi_s2mm_arsize  = 0;
	assign	axi_s2mm_arburst = 0;
	assign	axi_s2mm_arlock  = 0;
	assign	axi_s2mm_arcache = 0;
	assign	axi_s2mm_arprot  = 0;
	assign	axi_s2mm_arqos   = 0;
	//
	assign	axi_s2mm_rready  = 0;


	axidma #(
		.C_AXI_ADDR_WIDTH(25),
		.C_AXI_DATA_WIDTH(32),
		.C_AXI_ID_WIDTH(3),
		.AXI_READ_ID(3'b010),
		.AXI_WRITE_ID(3'b011),
	) dmai (
		.S_AXI_ACLK(i_clk),
		.S_AXI_ARESETN(!i_reset),
		//
		.S_AXIL_AWVALID(axil_dma_awvalid),
		.S_AXIL_AWREADY(axil_dma_awready),
		.S_AXIL_AWADDR( axil_dma_awaddr[5-1:0]),
		.S_AXIL_AWPROT( axil_dma_awprot),
//
		.S_AXIL_WVALID(axil_dma_wvalid),
		.S_AXIL_WREADY(axil_dma_wready),
		.S_AXIL_WDATA( axil_dma_wdata),
		.S_AXIL_WSTRB( axil_dma_wstrb),
//
		.S_AXIL_BVALID(axil_dma_bvalid),
		.S_AXIL_BREADY(axil_dma_bready),
		.S_AXIL_BRESP( axil_dma_bresp),
		// Read connections
		.S_AXIL_ARVALID(axil_dma_arvalid),
		.S_AXIL_ARREADY(axil_dma_arready),
		.S_AXIL_ARADDR( axil_dma_araddr[5-1:0]),
		.S_AXIL_ARPROT( axil_dma_arprot),
//
		.S_AXIL_RVALID(axil_dma_rvalid),
		.S_AXIL_RREADY(axil_dma_rready),
		.S_AXIL_RDATA( axil_dma_rdata),
		.S_AXIL_RRESP( axil_dma_rresp),
		//
		.M_AXI_AWVALID(axi_dma_awvalid),
		.M_AXI_AWREADY(axi_dma_awready),
		.M_AXI_AWID(   axi_dma_awid),
		.M_AXI_AWADDR( axi_dma_awaddr[25-1:0]),
		.M_AXI_AWLEN(  axi_dma_awlen),
		.M_AXI_AWSIZE( axi_dma_awsize),
		.M_AXI_AWBURST(axi_dma_awburst),
		.M_AXI_AWLOCK( axi_dma_awlock),
		.M_AXI_AWCACHE(axi_dma_awcache),
		.M_AXI_AWPROT( axi_dma_awprot),
		.M_AXI_AWQOS(  axi_dma_awqos),
//
		.M_AXI_WVALID(axi_dma_wvalid),
		.M_AXI_WREADY(axi_dma_wready),
		.M_AXI_WDATA( axi_dma_wdata),
		.M_AXI_WSTRB( axi_dma_wstrb),
		.M_AXI_WLAST( axi_dma_wlast),
//
		.M_AXI_BVALID(axi_dma_bvalid),
		.M_AXI_BREADY(axi_dma_bready),
		.M_AXI_BID(   axi_dma_bid),
		.M_AXI_BRESP( axi_dma_bresp),
		// Read connections
		.M_AXI_ARVALID(axi_dma_arvalid),
		.M_AXI_ARREADY(axi_dma_arready),
		.M_AXI_ARID(   axi_dma_arid),
		.M_AXI_ARADDR( axi_dma_araddr[25-1:0]),
		.M_AXI_ARLEN(  axi_dma_arlen),
		.M_AXI_ARSIZE( axi_dma_arsize),
		.M_AXI_ARBURST(axi_dma_arburst),
		.M_AXI_ARLOCK( axi_dma_arlock),
		.M_AXI_ARCACHE(axi_dma_arcache),
		.M_AXI_ARPROT( axi_dma_arprot),
		.M_AXI_ARQOS(  axi_dma_arqos),
//
		.M_AXI_RVALID(axi_dma_rvalid),
		.M_AXI_RREADY(axi_dma_rready),
		.M_AXI_RID(   axi_dma_rid),
		.M_AXI_RDATA( axi_dma_rdata),
		.M_AXI_RLAST( axi_dma_rlast),
		.M_AXI_RRESP( axi_dma_rresp),
		.o_int(dma_int)
	);


	demofull #(
		// {{{
		.C_S_AXI_ADDR_WIDTH(24),
		.C_S_AXI_DATA_WIDTH(32),
		.C_S_AXI_ID_WIDTH(3)
		// }}}
	) axirami (
		// {{{
		.S_AXI_ACLK(i_clk),
		.S_AXI_ARESETN(!i_reset),
		//
		.o_we(axiram_we),
		.o_waddr(axiram_waddr),
		.o_wdata(axiram_wdata),
		.o_wstrb(axiram_wstrb),
		.o_rd(axiram_rd),
		.o_raddr(axiram_raddr),
		.i_rdata(axiram_rdata),
		//
		//
		.S_AXI_AWVALID(axi_axiram_awvalid),
		.S_AXI_AWREADY(axi_axiram_awready),
		.S_AXI_AWID(   axi_axiram_awid),
		.S_AXI_AWADDR( axi_axiram_awaddr[24-1:0]),
		.S_AXI_AWLEN(  axi_axiram_awlen),
		.S_AXI_AWSIZE( axi_axiram_awsize),
		.S_AXI_AWBURST(axi_axiram_awburst),
		.S_AXI_AWLOCK( axi_axiram_awlock),
		.S_AXI_AWCACHE(axi_axiram_awcache),
		.S_AXI_AWPROT( axi_axiram_awprot),
		.S_AXI_AWQOS(  axi_axiram_awqos),
//
		.S_AXI_WVALID(axi_axiram_wvalid),
		.S_AXI_WREADY(axi_axiram_wready),
		.S_AXI_WDATA( axi_axiram_wdata),
		.S_AXI_WSTRB( axi_axiram_wstrb),
		.S_AXI_WLAST( axi_axiram_wlast),
//
		.S_AXI_BVALID(axi_axiram_bvalid),
		.S_AXI_BREADY(axi_axiram_bready),
		.S_AXI_BID(   axi_axiram_bid),
		.S_AXI_BRESP( axi_axiram_bresp),
		// Read connections
		.S_AXI_ARVALID(axi_axiram_arvalid),
		.S_AXI_ARREADY(axi_axiram_arready),
		.S_AXI_ARID(   axi_axiram_arid),
		.S_AXI_ARADDR( axi_axiram_araddr[24-1:0]),
		.S_AXI_ARLEN(  axi_axiram_arlen),
		.S_AXI_ARSIZE( axi_axiram_arsize),
		.S_AXI_ARBURST(axi_axiram_arburst),
		.S_AXI_ARLOCK( axi_axiram_arlock),
		.S_AXI_ARCACHE(axi_axiram_arcache),
		.S_AXI_ARPROT( axi_axiram_arprot),
		.S_AXI_ARQOS(  axi_axiram_arqos),
//
		.S_AXI_RVALID(axi_axiram_rvalid),
		.S_AXI_RREADY(axi_axiram_rready),
		.S_AXI_RID(   axi_axiram_rid),
		.S_AXI_RDATA( axi_axiram_rdata),
		.S_AXI_RLAST( axi_axiram_rlast),
		.S_AXI_RRESP( axi_axiram_rresp)
		// }}}
	);

	always @(posedge i_clk)
	if (axiram_we)
	for(axiram_ik=0; axiram_ik < 32/4;
			axiram_ik = axiram_ik + 1)
	begin
		if (axiram_wstrb[axiram_ik])
			axiram_mem[axiram_waddr][axiram_ik*8 +: 8] <= axiram_wdata[axiram_ik*8 +: 8];
	end

	always @(posedge i_clk)
	if (axiram_rd)
		axiram_rdata <= axiram_mem[axiram_raddr];

	axi2axilite #(
		// {{{
		.C_AXI_ADDR_WIDTH(9),
		.C_AXI_DATA_WIDTH(32),
		.C_AXI_ID_WIDTH(2)
		// }}}
	) dbgaxili (
		// {{{
		.S_AXI_ACLK(i_clk),
		.S_AXI_ARESETN(!i_reset),
		//
		//
		.S_AXI_AWVALID(wbu_dbgaxil_awvalid),
		.S_AXI_AWREADY(wbu_dbgaxil_awready),
		.S_AXI_AWID(   wbu_dbgaxil_awid),
		.S_AXI_AWADDR( wbu_dbgaxil_awaddr[9-1:0]),
		.S_AXI_AWLEN(  wbu_dbgaxil_awlen),
		.S_AXI_AWSIZE( wbu_dbgaxil_awsize),
		.S_AXI_AWBURST(wbu_dbgaxil_awburst),
		.S_AXI_AWLOCK( wbu_dbgaxil_awlock),
		.S_AXI_AWCACHE(wbu_dbgaxil_awcache),
		.S_AXI_AWPROT( wbu_dbgaxil_awprot),
		.S_AXI_AWQOS(  wbu_dbgaxil_awqos),
//
		.S_AXI_WVALID(wbu_dbgaxil_wvalid),
		.S_AXI_WREADY(wbu_dbgaxil_wready),
		.S_AXI_WDATA( wbu_dbgaxil_wdata),
		.S_AXI_WSTRB( wbu_dbgaxil_wstrb),
		.S_AXI_WLAST( wbu_dbgaxil_wlast),
//
		.S_AXI_BVALID(wbu_dbgaxil_bvalid),
		.S_AXI_BREADY(wbu_dbgaxil_bready),
		.S_AXI_BID(   wbu_dbgaxil_bid),
		.S_AXI_BRESP( wbu_dbgaxil_bresp),
		// Read connections
		.S_AXI_ARVALID(wbu_dbgaxil_arvalid),
		.S_AXI_ARREADY(wbu_dbgaxil_arready),
		.S_AXI_ARID(   wbu_dbgaxil_arid),
		.S_AXI_ARADDR( wbu_dbgaxil_araddr[9-1:0]),
		.S_AXI_ARLEN(  wbu_dbgaxil_arlen),
		.S_AXI_ARSIZE( wbu_dbgaxil_arsize),
		.S_AXI_ARBURST(wbu_dbgaxil_arburst),
		.S_AXI_ARLOCK( wbu_dbgaxil_arlock),
		.S_AXI_ARCACHE(wbu_dbgaxil_arcache),
		.S_AXI_ARPROT( wbu_dbgaxil_arprot),
		.S_AXI_ARQOS(  wbu_dbgaxil_arqos),
//
		.S_AXI_RVALID(wbu_dbgaxil_rvalid),
		.S_AXI_RREADY(wbu_dbgaxil_rready),
		.S_AXI_RID(   wbu_dbgaxil_rid),
		.S_AXI_RDATA( wbu_dbgaxil_rdata),
		.S_AXI_RLAST( wbu_dbgaxil_rlast),
		.S_AXI_RRESP( wbu_dbgaxil_rresp),
		//
		//
		.M_AXI_AWVALID(dbgaxil_dbgaxil_awvalid),
		.M_AXI_AWREADY(dbgaxil_dbgaxil_awready),
		.M_AXI_AWADDR( dbgaxil_dbgaxil_awaddr[9-1:0]),
		.M_AXI_AWPROT( dbgaxil_dbgaxil_awprot),
//
		.M_AXI_WVALID(dbgaxil_dbgaxil_wvalid),
		.M_AXI_WREADY(dbgaxil_dbgaxil_wready),
		.M_AXI_WDATA( dbgaxil_dbgaxil_wdata),
		.M_AXI_WSTRB( dbgaxil_dbgaxil_wstrb),
//
		.M_AXI_BVALID(dbgaxil_dbgaxil_bvalid),
		.M_AXI_BREADY(dbgaxil_dbgaxil_bready),
		.M_AXI_BRESP( dbgaxil_dbgaxil_bresp),
		// Read connections
		.M_AXI_ARVALID(dbgaxil_dbgaxil_arvalid),
		.M_AXI_ARREADY(dbgaxil_dbgaxil_arready),
		.M_AXI_ARADDR( dbgaxil_dbgaxil_araddr[9-1:0]),
		.M_AXI_ARPROT( dbgaxil_dbgaxil_arprot),
//
		.M_AXI_RVALID(dbgaxil_dbgaxil_rvalid),
		.M_AXI_RREADY(dbgaxil_dbgaxil_rready),
		.M_AXI_RDATA( dbgaxil_dbgaxil_rdata),
		.M_AXI_RRESP( dbgaxil_dbgaxil_rresp)
		// }}}
	);
	always @(posedge i_clk)
	if (i_reset)
		streamsrc_tvalid <= 0;
	else
		streamsrc_tvalid <= 1;

	always @(*)
		streamsrc_tlast = 1;

	initial	streamsrc_counter = 0;
	always @(posedge i_clk)
	if (i_reset)
		streamsrc_counter <= 0;
	else
		streamsrc_counter <= streamsrc_counter + 1;

	always @(posedge i_clk)
	if (!streamsrc_tvalid || streamsrc_tready)
		streamsrc_tdata <= streamsrc_counter;
`ifdef	BUSCONSOLE_ACCESS
	// {{{
	axilconsole #(
		// {{{
		.LGFLEN(6)
		// }}}
	) console(
		// {{{
		.S_AXI_ACLK(i_clk),
		.S_AXI_ARESETN(!i_reset),
		//
		.S_AXI_AWVALID(axil_uart_awvalid),
		.S_AXI_AWREADY(axil_uart_awready),
		.S_AXI_AWADDR( axil_uart_awaddr[4-1:0]),
		.S_AXI_AWPROT( axil_uart_awprot),
//
		.S_AXI_WVALID(axil_uart_wvalid),
		.S_AXI_WREADY(axil_uart_wready),
		.S_AXI_WDATA( axil_uart_wdata),
		.S_AXI_WSTRB( axil_uart_wstrb),
//
		.S_AXI_BVALID(axil_uart_bvalid),
		.S_AXI_BREADY(axil_uart_bready),
		.S_AXI_BRESP( axil_uart_bresp),
		// Read connections
		.S_AXI_ARVALID(axil_uart_arvalid),
		.S_AXI_ARREADY(axil_uart_arready),
		.S_AXI_ARADDR( axil_uart_araddr[4-1:0]),
		.S_AXI_ARPROT( axil_uart_arprot),
//
		.S_AXI_RVALID(axil_uart_rvalid),
		.S_AXI_RREADY(axil_uart_rready),
		.S_AXI_RDATA( axil_uart_rdata),
		.S_AXI_RRESP( axil_uart_rresp),
		.o_uart_stb(w_console_tx_stb),
			.o_uart_data(w_console_tx_data),
			.i_uart_busy(w_console_busy),
		.i_uart_stb(w_console_rx_stb),
			.i_uart_data(w_console_rx_data),
		.o_uart_rx_int(uartrx_int),
			.o_uart_tx_int(uarttx_int),
			.o_uart_rxfifo_int(uartrxf_int),
			.o_uart_txfifo_int(uarttxf_int)
		// }}}
	);
	// }}}
`else	// BUSCONSOLE_ACCESS
	// {{{
	// Null bus slave
	// {{{
	// }}}
	// Null interrupt definitions
	// {{{
	assign	uartrxf_int = 1'b0;	// uart.INT.UARTRXF.WIRE
	assign	uarttx_int = 1'b0;	// uart.INT.UARTTX.WIRE
	assign	uarttxf_int = 1'b0;	// uart.INT.UARTTXF.WIRE
	assign	uartrx_int = 1'b0;	// uart.INT.UARTRX.WIRE
	// }}}
	// }}}
`endif	// BUSCONSOLE_ACCESS

	axi2axilite #(
		.C_AXI_ADDR_WIDTH(8),
		.C_AXI_DATA_WIDTH(32),
		.C_AXI_ID_WIDTH(3)
	) controlbusi (
		.S_AXI_ACLK(i_clk),
		.S_AXI_ARESETN(!i_reset),
		//
		//
		.S_AXI_AWVALID(axi_controlbus_awvalid),
		.S_AXI_AWREADY(axi_controlbus_awready),
		.S_AXI_AWID(   axi_controlbus_awid),
		.S_AXI_AWADDR( axi_controlbus_awaddr[8-1:0]),
		.S_AXI_AWLEN(  axi_controlbus_awlen),
		.S_AXI_AWSIZE( axi_controlbus_awsize),
		.S_AXI_AWBURST(axi_controlbus_awburst),
		.S_AXI_AWLOCK( axi_controlbus_awlock),
		.S_AXI_AWCACHE(axi_controlbus_awcache),
		.S_AXI_AWPROT( axi_controlbus_awprot),
		.S_AXI_AWQOS(  axi_controlbus_awqos),
//
		.S_AXI_WVALID(axi_controlbus_wvalid),
		.S_AXI_WREADY(axi_controlbus_wready),
		.S_AXI_WDATA( axi_controlbus_wdata),
		.S_AXI_WSTRB( axi_controlbus_wstrb),
		.S_AXI_WLAST( axi_controlbus_wlast),
//
		.S_AXI_BVALID(axi_controlbus_bvalid),
		.S_AXI_BREADY(axi_controlbus_bready),
		.S_AXI_BID(   axi_controlbus_bid),
		.S_AXI_BRESP( axi_controlbus_bresp),
		// Read connections
		.S_AXI_ARVALID(axi_controlbus_arvalid),
		.S_AXI_ARREADY(axi_controlbus_arready),
		.S_AXI_ARID(   axi_controlbus_arid),
		.S_AXI_ARADDR( axi_controlbus_araddr[8-1:0]),
		.S_AXI_ARLEN(  axi_controlbus_arlen),
		.S_AXI_ARSIZE( axi_controlbus_arsize),
		.S_AXI_ARBURST(axi_controlbus_arburst),
		.S_AXI_ARLOCK( axi_controlbus_arlock),
		.S_AXI_ARCACHE(axi_controlbus_arcache),
		.S_AXI_ARPROT( axi_controlbus_arprot),
		.S_AXI_ARQOS(  axi_controlbus_arqos),
//
		.S_AXI_RVALID(axi_controlbus_rvalid),
		.S_AXI_RREADY(axi_controlbus_rready),
		.S_AXI_RID(   axi_controlbus_rid),
		.S_AXI_RDATA( axi_controlbus_rdata),
		.S_AXI_RLAST( axi_controlbus_rlast),
		.S_AXI_RRESP( axi_controlbus_rresp),
		//
		//
		.M_AXI_AWVALID(axil_controlbus_awvalid),
		.M_AXI_AWREADY(axil_controlbus_awready),
		.M_AXI_AWADDR( axil_controlbus_awaddr[8-1:0]),
		.M_AXI_AWPROT( axil_controlbus_awprot),
//
		.M_AXI_WVALID(axil_controlbus_wvalid),
		.M_AXI_WREADY(axil_controlbus_wready),
		.M_AXI_WDATA( axil_controlbus_wdata),
		.M_AXI_WSTRB( axil_controlbus_wstrb),
//
		.M_AXI_BVALID(axil_controlbus_bvalid),
		.M_AXI_BREADY(axil_controlbus_bready),
		.M_AXI_BRESP( axil_controlbus_bresp),
		// Read connections
		.M_AXI_ARVALID(axil_controlbus_arvalid),
		.M_AXI_ARREADY(axil_controlbus_arready),
		.M_AXI_ARADDR( axil_controlbus_araddr[8-1:0]),
		.M_AXI_ARPROT( axil_controlbus_arprot),
//
		.M_AXI_RVALID(axil_controlbus_rvalid),
		.M_AXI_RREADY(axil_controlbus_rready),
		.M_AXI_RDATA( axil_controlbus_rdata),
		.M_AXI_RRESP( axil_controlbus_rresp)
	);
	streamcounter #(
		.C_AXIS_DATA_WIDTH(32),
		.OPT_LOWPOWER(1'b1)
	) streamsinki (
		.S_AXI_ACLK(i_clk),
		.S_AXI_ARESETN(!i_reset),
		//
		.S_AXIS_TVALID(streamsink_tvalid),
		.S_AXIS_TREADY(streamsink_tready),
		.S_AXIS_TDATA(streamsink_tdata),
		.S_AXIS_TLAST(streamsink_tlast),
		//
		//
		.S_AXI_AWVALID(axil_streamsink_awvalid),
		.S_AXI_AWREADY(axil_streamsink_awready),
		.S_AXI_AWADDR( axil_streamsink_awaddr[4-1:0]),
		.S_AXI_AWPROT( axil_streamsink_awprot),
//
		.S_AXI_WVALID(axil_streamsink_wvalid),
		.S_AXI_WREADY(axil_streamsink_wready),
		.S_AXI_WDATA( axil_streamsink_wdata),
		.S_AXI_WSTRB( axil_streamsink_wstrb),
//
		.S_AXI_BVALID(axil_streamsink_bvalid),
		.S_AXI_BREADY(axil_streamsink_bready),
		.S_AXI_BRESP( axil_streamsink_bresp),
		// Read connections
		.S_AXI_ARVALID(axil_streamsink_arvalid),
		.S_AXI_ARREADY(axil_streamsink_arready),
		.S_AXI_ARADDR( axil_streamsink_araddr[4-1:0]),
		.S_AXI_ARPROT( axil_streamsink_arprot),
//
		.S_AXI_RVALID(axil_streamsink_rvalid),
		.S_AXI_RREADY(axil_streamsink_rready),
		.S_AXI_RDATA( axil_streamsink_rdata),
		.S_AXI_RRESP( axil_streamsink_rresp)
	);



	axilite2axi #(
		.C_AXI_ADDR_WIDTH(25),
		.C_AXI_DATA_WIDTH(32),
		.C_AXI_ID_WIDTH(3),
		.C_AXI_WRITE_ID(3'b100),
		.C_AXI_READ_ID(3'b101)
	) vibusi (
		.ACLK(i_clk),
		.ARESETN(!i_reset),
		//
		.S_AXI_AWVALID(S_AXI_AWVALID),
		.S_AXI_AWREADY(S_AXI_AWREADY),
		.S_AXI_AWADDR( S_AXI_AWADDR),
		.S_AXI_AWPROT( 3'h0),
		//
		.S_AXI_WVALID(S_AXI_WVALID),
		.S_AXI_WREADY(S_AXI_WREADY),
		.S_AXI_WDATA( S_AXI_WDATA),
		.S_AXI_WSTRB( S_AXI_WSTRB),
		//
		.S_AXI_BVALID(S_AXI_BVALID),
		.S_AXI_BREADY(S_AXI_BREADY),
		.S_AXI_BRESP( S_AXI_BRESP),
		//
		.S_AXI_ARVALID(S_AXI_ARVALID),
		.S_AXI_ARREADY(S_AXI_ARREADY),
		.S_AXI_ARADDR( S_AXI_ARADDR),
		.S_AXI_ARPROT( 3'h0),
		//
		.S_AXI_RVALID(S_AXI_RVALID),
		.S_AXI_RREADY(S_AXI_RREADY),
		.S_AXI_RDATA( S_AXI_RDATA),
		.S_AXI_RRESP( S_AXI_RRESP),
		//
		//
		.M_AXI_AWVALID(axi_vibus_awvalid),
		.M_AXI_AWREADY(axi_vibus_awready),
		.M_AXI_AWID(   axi_vibus_awid),
		.M_AXI_AWADDR( axi_vibus_awaddr[25-1:0]),
		.M_AXI_AWLEN(  axi_vibus_awlen),
		.M_AXI_AWSIZE( axi_vibus_awsize),
		.M_AXI_AWBURST(axi_vibus_awburst),
		.M_AXI_AWLOCK( axi_vibus_awlock),
		.M_AXI_AWCACHE(axi_vibus_awcache),
		.M_AXI_AWPROT( axi_vibus_awprot),
		.M_AXI_AWQOS(  axi_vibus_awqos),
//
		.M_AXI_WVALID(axi_vibus_wvalid),
		.M_AXI_WREADY(axi_vibus_wready),
		.M_AXI_WDATA( axi_vibus_wdata),
		.M_AXI_WSTRB( axi_vibus_wstrb),
		.M_AXI_WLAST( axi_vibus_wlast),
//
		.M_AXI_BVALID(axi_vibus_bvalid),
		.M_AXI_BREADY(axi_vibus_bready),
		.M_AXI_BID(   axi_vibus_bid),
		.M_AXI_BRESP( axi_vibus_bresp),
		// Read connections
		.M_AXI_ARVALID(axi_vibus_arvalid),
		.M_AXI_ARREADY(axi_vibus_arready),
		.M_AXI_ARID(   axi_vibus_arid),
		.M_AXI_ARADDR( axi_vibus_araddr[25-1:0]),
		.M_AXI_ARLEN(  axi_vibus_arlen),
		.M_AXI_ARSIZE( axi_vibus_arsize),
		.M_AXI_ARBURST(axi_vibus_arburst),
		.M_AXI_ARLOCK( axi_vibus_arlock),
		.M_AXI_ARCACHE(axi_vibus_arcache),
		.M_AXI_ARPROT( axi_vibus_arprot),
		.M_AXI_ARQOS(  axi_vibus_arqos),
//
		.M_AXI_RVALID(axi_vibus_rvalid),
		.M_AXI_RREADY(axi_vibus_rready),
		.M_AXI_RID(   axi_vibus_rid),
		.M_AXI_RDATA( axi_vibus_rdata),
		.M_AXI_RLAST( axi_vibus_rlast),
		.M_AXI_RRESP( axi_vibus_rresp)
	);
	axilperiphs #(
	) axilpi (
		// {{{
		.S_AXI_ACLK(i_clk),
		.S_AXI_ARESETN(!i_reset),
		//
		.S_AXI_AWVALID(axil_axilp_awvalid),
		.S_AXI_AWREADY(axil_axilp_awready),
		.S_AXI_AWADDR( axil_axilp_awaddr[6-1:0]),
		.S_AXI_AWPROT( axil_axilp_awprot),
//
		.S_AXI_WVALID(axil_axilp_wvalid),
		.S_AXI_WREADY(axil_axilp_wready),
		.S_AXI_WDATA( axil_axilp_wdata),
		.S_AXI_WSTRB( axil_axilp_wstrb),
//
		.S_AXI_BVALID(axil_axilp_bvalid),
		.S_AXI_BREADY(axil_axilp_bready),
		.S_AXI_BRESP( axil_axilp_bresp),
		// Read connections
		.S_AXI_ARVALID(axil_axilp_arvalid),
		.S_AXI_ARREADY(axil_axilp_arready),
		.S_AXI_ARADDR( axil_axilp_araddr[6-1:0]),
		.S_AXI_ARPROT( axil_axilp_arprot),
//
		.S_AXI_RVALID(axil_axilp_rvalid),
		.S_AXI_RREADY(axil_axilp_rready),
		.S_AXI_RDATA( axil_axilp_rdata),
		.S_AXI_RRESP( axil_axilp_rresp),
		.i_cpu_reset(axilp_cmd_reset),
		.i_cpu_halted(axilp_cpu_halted),
		.i_cpu_gie(axilp_gie),
		.i_cpu_pfstall(axilp_pfstall),
		.i_cpu_opstall(axilp_opstall),
		.i_cpu_icount(axilp_icount),
		.i_vec(syspic),
		.o_interrupt(cpu_interrupt),
		.o_watchdog_reset(axilp_watchdog)
		// }}}
	);
	aximm2s #(
		.C_AXI_ADDR_WIDTH(25),
		.C_AXI_DATA_WIDTH(32),
		.C_AXI_ID_WIDTH(3),
		.AXI_ID(3'b00)
	) mm2si (
		.S_AXI_ACLK(i_clk),
		.S_AXI_ARESETN(!i_reset),
		//
		.M_AXIS_TVALID(streamsink_tvalid),
		.M_AXIS_TREADY(streamsink_tready),
		.M_AXIS_TDATA(streamsink_tdata),
		.M_AXIS_TLAST(streamsink_tlast),
		//
		.S_AXIL_AWVALID(axil_mm2s_awvalid),
		.S_AXIL_AWREADY(axil_mm2s_awready),
		.S_AXIL_AWADDR( axil_mm2s_awaddr[5-1:0]),
		.S_AXIL_AWPROT( axil_mm2s_awprot),
//
		.S_AXIL_WVALID(axil_mm2s_wvalid),
		.S_AXIL_WREADY(axil_mm2s_wready),
		.S_AXIL_WDATA( axil_mm2s_wdata),
		.S_AXIL_WSTRB( axil_mm2s_wstrb),
//
		.S_AXIL_BVALID(axil_mm2s_bvalid),
		.S_AXIL_BREADY(axil_mm2s_bready),
		.S_AXIL_BRESP( axil_mm2s_bresp),
		// Read connections
		.S_AXIL_ARVALID(axil_mm2s_arvalid),
		.S_AXIL_ARREADY(axil_mm2s_arready),
		.S_AXIL_ARADDR( axil_mm2s_araddr[5-1:0]),
		.S_AXIL_ARPROT( axil_mm2s_arprot),
//
		.S_AXIL_RVALID(axil_mm2s_rvalid),
		.S_AXIL_RREADY(axil_mm2s_rready),
		.S_AXIL_RDATA( axil_mm2s_rdata),
		.S_AXIL_RRESP( axil_mm2s_rresp),
				.M_AXI_ARVALID(axi_mm2s_arvalid),
		.M_AXI_ARREADY(axi_mm2s_arready),
		.M_AXI_ARID(   axi_mm2s_arid),
		.M_AXI_ARADDR( axi_mm2s_araddr[25-1:0]),
		.M_AXI_ARLEN(  axi_mm2s_arlen),
		.M_AXI_ARSIZE( axi_mm2s_arsize),
		.M_AXI_ARBURST(axi_mm2s_arburst),
		.M_AXI_ARLOCK( axi_mm2s_arlock),
		.M_AXI_ARCACHE(axi_mm2s_arcache),
		.M_AXI_ARPROT( axi_mm2s_arprot),
		.M_AXI_ARQOS(  axi_mm2s_arqos),
//
		.M_AXI_RVALID(axi_mm2s_rvalid),
		.M_AXI_RREADY(axi_mm2s_rready),
		.M_AXI_RID(   axi_mm2s_rid),
		.M_AXI_RDATA( axi_mm2s_rdata),
		.M_AXI_RLAST( axi_mm2s_rlast),
		.M_AXI_RRESP( axi_mm2s_rresp),
		.o_int(mm2s_int)
	);

	assign	axi_mm2s_awvalid = 0;
	assign	axi_mm2s_awid    = 0;
	assign	axi_mm2s_awaddr  = 0;
	assign	axi_mm2s_awlen   = 0;
	assign	axi_mm2s_awsize  = 0;
	assign	axi_mm2s_awburst = 0;
	assign	axi_mm2s_awlock  = 0;
	assign	axi_mm2s_awcache = 0;
	assign	axi_mm2s_awprot  = 0;
	assign	axi_mm2s_awqos   = 0;
	//
	assign	axi_mm2s_wvalid  = 0;
	assign	axi_mm2s_wdata   = 0;
	assign	axi_mm2s_wstrb   = 0;
	assign	axi_mm2s_wlast   = 0;
	//
	assign	axi_mm2s_bready  = 1;

	// }}}
endmodule // main.v
